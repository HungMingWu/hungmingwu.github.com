<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: gcc | 第十三號艦隊]]></title>
  <link href="http://HungMingWu.github.com/blog/tags/gcc/atom.xml" rel="self"/>
  <link href="http://HungMingWu.github.com/"/>
  <updated>2013-01-18T23:19:26+08:00</updated>
  <id>http://HungMingWu.github.com/</id>
  <author>
    <name><![CDATA[吳小明]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GCC Notes]]></title>
    <link href="http://HungMingWu.github.com/blog/2012/12/20/gcc-notes/"/>
    <updated>2012-12-20T10:59:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2012/12/20/gcc-notes</id>
    <content type="html"><![CDATA[<h3 id="gcc-">gcc 常用參數介紹</h3>

<ul>
  <li>
    <p>什麼參數都不加
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">gcc</span> hello.c
</span></code></pre></td></tr></table></div></figure></notextile></div>
直接產生a.out</p>
  </li>
  <li>
    <p>無連結選項
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">gcc</span> hello.c -o hello
</span></code></pre></td></tr></table></div></figure></notextile></div>
直接產生可執行文件hello</p>
  </li>
  <li>
    <p><code>-x language</code> filename 
設定文件所使用的語言，使預設的附檔名失效，對之後的檔案也有效，除非你再次設定這個參數。可以使用的語言有C/C++等。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">gcc</span> -x c hello.pig
</span></code></pre></td></tr></table></div></figure></notextile></div>
上面這個例子，就是將附檔名pig的檔案當作C語言來編譯。如果在後面加上了<code>-x none</code> filename，則會抵銷前面的作用，回復復育社規則來編譯。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">gcc</span> -x c hello.pig -x none hello2.c
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
  </li>
  <li>
    <p><code>-c</code>
將程式碼生成至obj file後停止，預設附檔名是.o。</p>
  </li>
  <li>
    <p><code>-S</code>
將程式生成至Assembler Code後停止，預設附檔名是.s。</p>
  </li>
  <li>
    <p><code>-E</code>
只處理Preprocess的部份，跟上面兩者不同，不會產生檔案，需要用Redirect的方式產生文件。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">gcc</span> -E hello.c &amp;gt; hello.i
</span><span class='line'><span class="nv">$ </span><span class="nb">gcc</span> -E hello.c | less
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
  </li>
  <li>
    <p><code>-o</code> 
指定輸出檔案名稱，可以跟上面參數合併使用。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">gcc</span> -S hello.c -o hello.asm
</span><span class='line'><span class="nv">$ </span><span class="nb">gcc</span> -c hello.c  -o hello.obj
</span><span class='line'><span class="nv">$ </span><span class="nb">gcc</span> hello.c -o hello.exe
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
  </li>
  <li><code>-ansi</code>
關閉GNU C和ANSI C不相容的部分，在C模式相當於c90，在C++模式相當於C++98。如<code>asm</code>、``inline<code>、</code>typeof<code>等。如果你不考慮寫個標準的ISO C語言的話，在</code>-ansi<code>參數下還是能夠用</code><strong>asm</strong><code>、</code><strong>inline</strong><code>、</code><strong>typeof</strong>`等GCC拓展語法繼續工作。如果要避免這種情況，可以配合底下這個參數。</li>
  <li><code>-pedandic</code>
對所有不合乎C/C++ Standard的與法發出嚴重警告，</li>
</ul>

]]></content>
  </entry>
  
</feed>
