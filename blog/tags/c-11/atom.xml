<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: C++11 | 第十三號艦隊]]></title>
  <link href="http://HungMingWu.github.com/blog/tags/c-11/atom.xml" rel="self"/>
  <link href="http://HungMingWu.github.com/"/>
  <updated>2013-06-05T23:23:57+08:00</updated>
  <id>http://HungMingWu.github.com/</id>
  <author>
    <name><![CDATA[吳小明]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Variadic templates]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/06/03/variadic-templates/"/>
    <updated>2013-06-03T22:44:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/06/03/variadic-templates</id>
    <content type="html"><![CDATA[<p>這次介紹另一個C++11重要的特性<strong>Variadic templates</strong></p>

<h2 id="printf">從printf說起</h2>
<p>相信每個寫程式的人，就算沒用過printf，也聽過printf的名字，printf的徒子徒孫大概跟Unix的子孫一樣多。而一般的printf使用方式就類似如此。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">my_printf</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">format</span><span class="p">,</span> <span class="err">…</span><span class="p">);</span>
</span><span class='line'><span class="n">my_printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">d</span> <span class="o">+</span> <span class="o">%</span><span class="n">d</span> <span class="o">=</span> <span class="o">%</span><span class="n">d</span><span class="err">”</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在設計一個通用函數的時候，無法知道後面參數有多少個，因此需要一個支持不定參數的機制。
從上面的程式碼看出，我們支援不定參數的語法就是<code>...</code>來表示。
而在C語言如何實做這樣的機制，可以參考<a href="http://msdn.microsoft.com/en-us/library/kb57fad8%28v=vs.80%29.aspx">MSDN上的範例</a>。</p>

<h2 id="marco">Marco也支援不定參數</h2>
<p>在C99標準裡，Macro支持不定參數，不過Visual Studio至今不支援C99。
我們可以寫類似這樣的Macro</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define dprintf(enable, …) dprintf_impl(&lt;strong&gt;FILE&lt;/strong&gt;, &lt;strong&gt;LINE&lt;/strong&gt;, enable, &lt;strong&gt;VA_ARGS&lt;/strong&gt;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在參數列的最後面寫 …，然後就可以用 <strong>VA_ARGS</strong> 代表 … 所傳入的參數。</p>

<h2 id="template">如何讓Template支援不定參數</h2>

<h3 id="c98">從C++98談起</h3>
<p>在實作Command Design Pattern的時候，常常需要把外部函數的參數原封不動的傳遞至內部函數，解決方法大概就像這樣。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#define P1 typename T1</span>
</span><span class='line'><span class="cp">#define A1 T1 &amp;amp;&amp;amp;v1</span>
</span><span class='line'><span class="cp">#define V1 v1</span>
</span><span class='line'><span class="cp">#define P2 typename T1, typename T2</span>
</span><span class='line'><span class="cp">#define A2 T1 &amp;amp;&amp;amp;v1, T2 &amp;amp;&amp;amp;v2</span>
</span><span class='line'><span class="cp">#define V2 v1, v2</span>
</span><span class='line'><span class="cp">#define P3 typename T1, typename T2, typename T3</span>
</span><span class='line'><span class="cp">#define A3 T1 &amp;amp;&amp;amp;v1, T2 &amp;amp;&amp;amp;v2, T3 &amp;amp;&amp;amp;v3</span>
</span><span class='line'><span class="cp">#define V3 v1, v2, v3</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="n">p1</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">outer</span><span class="p">(</span><span class="n">A1</span><span class="p">)</span> <span class="p">{</span> <span class="n">inner</span><span class="p">(</span><span class="n">V1</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="n">p2</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">outer</span><span class="p">(</span><span class="n">A2</span><span class="p">)</span> <span class="p">{</span> <span class="n">inner</span><span class="p">(</span><span class="n">V2</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="n">p3</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">outer</span><span class="p">(</span><span class="n">A3</span><span class="p">)</span> <span class="p">{</span> <span class="n">inner</span><span class="p">(</span><span class="n">V3</span><span class="p">);</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
這方案的缺點大概有以下幾點
- 可代入的參數數量有限 (雖然可以手動擴充)
- 程式碼難以維護，核心的程式碼不多，但是重複的程式碼很多
- 編譯速度緩慢
- 極度依賴Preprocessor
加上C++11的新特性之後，問題變得更複雜了。</p3></p2></p1></p>

<h3 id="c11">C++11時期</h3>
<p>來個最簡單的範例
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span><span class="p">...</span> <span class="n">args</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">VariadicTemplate</span> <span class="p">{};</span>
</span><span class='line'><span class="k">template</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="p">...</span><span class="n">Args</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">VariadicTemplate1</span> <span class="p">{};</span><span class="o">&lt;/</span><span class="k">typename</span><span class="p">...</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">VariadicTemplate</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">a</span><span class="p">;</span>				<span class="c1">// VariadicTemplate1接受無任何型別</span>
</span><span class='line'><span class="n">VariadicTemplate</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="n">VariadicTemplate1</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">c</span><span class="p">;</span>				<span class="c1">// VariadicTemplate1至少需要一個型別，編譯器會報錯</span>
</span><span class='line'><span class="n">VariadicTemplate1</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">double</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">d</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在Args左邊出現`...`時，表示Args是一個**Template type parameter pack**，如上面的最後一行，T就是double，而Args就是int, string，除了類別之外，非類別的template paramter也可以這樣使用。如下
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">unsigned</span> <span class="p">...</span><span class="n">dims</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Array</span> <span class="p">{};</span>
</span><span class='line'><span class="n">Array</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">arr</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
而Function template也可以像Class Template一樣使用不定參數
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="p">...</span><span class="n">Args</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">func</span><span class="p">(</span><span class="n">Args</span> <span class="p">...</span><span class="n">args</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
這裡的Args不是Type，args也不是一個value，所以以下的程式碼會出問題
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">typedef</span> <span class="n">Args</span> <span class="n">MyList</span><span class="p">;</span>
</span><span class='line'><span class="n">MyList</span> <span class="n">var</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">copy</span> <span class="o">=</span> <span class="n">args</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
而sizeof也跟著Variadic templates而新增新特性，`sizeof...`可以印出Args到底有多少個參數
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span><span class="p">...</span> <span class="n">args</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">VariadicTemplate</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">...(</span><span class="n">Args</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">VariadicTemplate</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">size</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>	<span class="c1">// 0</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">VariadicTemplate</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">size</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></typename...></int></p>

<h3 id="section">如何解決之前的問題</h3>
<p>用新的特性同時解決perfect forwarding跟Variadic templates
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="err">…</span><span class="n">Ts</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">outer</span><span class="p">(</span><span class="n">Ts</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">…</span><span class="n">args</span><span class="p">)</span> <span class="p">{</span> <span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">ts</span><span class="o">&gt;</span><span class="p">(</span><span class="n">args</span><span class="p">)...);</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></ts></p>

<h3 id="section-1">如何抽取單一個型別與參數</h3>
<p>透過Template specification來實作
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="k">template</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="p">...</span><span class="n">Args</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">v</span><span class="p">,</span> <span class="n">Args</span> <span class="p">...</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">print</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">v</span><span class="p">));</span>
</span><span class='line'>	<span class="n">print</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">args</span><span class="o">&gt;</span><span class="p">(</span><span class="n">args</span><span class="p">)...);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></args></t></typename></p>

<p>還有其他未介紹到的特性，基於所知有限&lt;無法完全說明，可以參考<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2080.pdf">Variadic Templates (Revision 3) Draft</a>跟<a href="http://channel9.msdn.com/Events/GoingNative/GoingNative-2012/Variadic-Templates-are-Funadic">Variadic Templates are Funadic</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rvalue reference, std::move and std::forward]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/02/18/rvalue-reference/"/>
    <updated>2013-02-18T20:50:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/02/18/rvalue-reference</id>
    <content type="html"><![CDATA[<p>這篇文章主要是<a href="http://blogs.msdn.com/b/vcblog/archive/2009/02/03/rvalue-references-c-0x-features-in-vc10-part-2.aspx">Rvalue References: C++0x Features in VC10, Part 2</a>的閱讀筆記，在原文撰寫過程當中，規格有所變動，因此根據最新的規則做補充說明。</p>

<h2 id="copy-problems">Copy Problems</h2>
<p>C++98/03的時候，最令人詬病的問題，就是建立太多臨時物件，Value Semantics的意思就是複製出來的物件跟原先是獨立的，不會互相干擾</p>

<h2 id="lvalue-and-rvalue">Lvalue and Rvalue</h2>
<p>在C++98/03時期，有這麼一條規則<code>Every C++ expression is either an lvalue or an rvalue.</code>，Lvalue是在運算過後留下來的續存物件，而Rvalue是運算過後生命期就結束的臨時物件。
殂此之外，C++98/03裡還有一條規則<code>A function call is an lvalue if and only if the result type is a reference</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">string</span> <span class="n">one</span><span class="p">(</span><span class="err">“</span><span class="n">one</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="n">string</span> <span class="n">two</span><span class="p">(</span><span class="err">“</span><span class="n">two</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="n">string</span> <span class="n">three</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="err">“</span><span class="n">three</span><span class="err">”</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">const</span> <span class="n">string</span> <span class="n">four</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="err">“</span><span class="n">four</span><span class="err">”</span><span class="p">;</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">one</span><span class="p">;</span>     <span class="c1">// modifiable lvalue</span>
</span><span class='line'><span class="n">two</span><span class="p">;</span>     <span class="c1">// const lvalue</span>
</span><span class='line'><span class="n">three</span><span class="p">();</span> <span class="c1">// modifiable rvalue</span>
</span><span class='line'><span class="n">four</span><span class="p">();</span>  <span class="c1">// const rvalue</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
  <li>Type&amp;可以繫結到一個modifiable lvalue，而如果要繫結到modifiable rvalue，C++規定禁止(Visual C++除外，可以把警告層級從3調到4，會警告你這樣很危險，而gcc跟clang則是輸出錯誤訊息。)</li>
  <li>const Type&amp;可以繫結到任何一種型態，不過不能對Rvalue做任何修改，因此不能對即將消滅的臨時物件採取任何行動</li>
</ul>

<p>而在C++11之後，引進了<code>Rvalue reference</code>，解決了這個問題。</p>

<ul>
  <li>Type&amp;&amp;可以繫結到一個modifiable rvalue，而不能繫結到modifiable lvalue，需要強制轉型。</li>
  <li>const Type&amp;&amp;可以繫結任何形態</li>
</ul>

<p>每個reference都有一個名字，所以Bind到Rvalue的refernce，他是一個<strong>Lvalue</strong>，因此以下的程式碼。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;)</span> <span class="p">{</span> <span class="n">cout</span> <span class="err">« “</span><span class="n">print</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;)</span><span class="err">”</span> <span class="err">« </span><span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;)</span> <span class="p">{</span> <span class="n">cout</span> <span class="err">« “</span><span class="n">print</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;)</span><span class="err">”</span> <span class="err">« </span><span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">RvalueTest</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span> <span class="n">print</span><span class="p">(</span><span class="n">str</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="n">RvalueTest</span><span class="p">(</span><span class="n">string</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在RValueTest執行結束之前，str是個合法的物件，因此被當作Lvalue，會執行第一個print。</p>

<p>為了學習Rvalue的觀念，自行打造move跟forward函數。</p>

<p>先看C++11之後引進的Reference Collapsing Rules</p>

<ul>
  <li>T&amp; + &amp; =&gt; T&amp;</li>
  <li>T&amp;&amp; + &amp; =&gt; T&amp;</li>
  <li>T&amp; + &amp;&amp; =&gt; T&amp;</li>
  <li>T&amp;&amp; + T&amp;&amp; =&gt; T&amp;&amp;</li>
</ul>

<p>而Move的用途就是明確指出不管物件是Lvalue或Rvalue，一律轉成Rvalue就是了。
而Forward的用途把外面的參數跟語意原封不動的傳進去內部，是Lvalue就是Lvalue，而Rvalue就是Rvalue。
先從比較簡單的Move開始看起，我門打造的第一版Move大概像這樣。
由於Move是個template function，必須進行Template Argument Deduction，此時引進了一條新的規則。
如果傳進來的是Lvalue的話，將會推導成T&amp;，反之如果是Rvalue的話，就會推導成T(根據Reference Collapsing Rules，T和T&amp;&amp;都符合要求，為了解決歧異性，這邊強制要求推導成T)
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">Move</span><span class="p">(....</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">return</span> <span class="k">static_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
這邊先來決定如何傳遞參數，**Call by value**第一個被否決，接著就是`T&amp;`跟`T&amp;&amp;`的選擇，根據前面的Reference Collapsing Rules，如果是`T&amp;`的話一律會摺疊成`T&amp;`，而T&amp;無法繫結至modifiable rvalue，而如果是`T&amp;&amp;`的話，不管Lvalue跟Rvalue都可以順利繫結。</typename></p>

<p>接著我們來測試第一版的程式碼
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">quark</span><span class="p">(</span><span class="n">Move</span><span class="p">(</span><span class="n">up</span><span class="p">));</span>
</span><span class='line'><span class="n">quark</span><span class="p">(</span><span class="n">Move</span><span class="p">(</span><span class="n">down</span><span class="p">));</span>
</span><span class='line'><span class="n">quark</span><span class="p">(</span><span class="n">Move</span><span class="p">(</span><span class="n">strange</span><span class="p">()));</span>
</span><span class='line'><span class="n">quark</span><span class="p">(</span><span class="n">Move</span><span class="p">(</span><span class="n">charm</span><span class="p">()));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
印出的結果是
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="nl">t:</span> <span class="n">up</span>
</span><span class='line'><span class="nl">T:</span> <span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">:</span> <span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nl">t:</span> <span class="n">down</span>
</span><span class='line'><span class="nl">T:</span> <span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">:</span> <span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nl">t:</span> <span class="n">strange</span><span class="p">()</span>
</span><span class='line'><span class="nl">T:</span> <span class="n">string</span>
</span><span class='line'><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">:</span> <span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nl">t:</span> <span class="n">charm</span><span class="p">()</span>
</span><span class='line'><span class="nl">T:</span> <span class="k">const</span> <span class="n">string</span>
</span><span class='line'><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">:</span> <span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
顯然結果錯了，原因在於實際參數是Lvalue的話，T會被推導成U&amp;，而T&amp;&amp;的結果依然是U&amp;，變成Move傳回去的語意是個Lvalue，因此導致上面的結果。
所以我們要做的，就是把U&amp;或U&amp;&amp;一律轉成U&amp;&amp;，也就是std::remove_refernce存在的理由。改寫我們的程式，先用RemoveRefenece取得Primitive Type, 然後加上&amp;&amp;之後就可以得到正確的值。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">RemoveReference</span> <span class="p">{</span>
</span><span class='line'>	<span class="k">typedef</span> <span class="n">T</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">RemoveReference</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>	<span class="k">typedef</span> <span class="n">T</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">RemoveReference</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>	<span class="k">typedef</span> <span class="n">T</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">typename</span> <span class="n">RemoveReference</span><span class="o">&lt;</span><span class="n">t</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">Move</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">return</span> <span class="k">static_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">RemoveReference</span><span class="o">&lt;</span><span class="n">t</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
gcc的實作就類似於這樣。
接著來討論forward該怎麼做，從上面我們可以知道，我們只能用T&amp;&amp;來傳遞參數。
先來一組helper function來驗證程式的正確性。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;inner(std::string &amp;amp;str)&quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">inner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;inner(const std::string &amp;amp;str)&quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">inner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;inner(const std::string&amp;amp;&amp;amp; str)&quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;inner(std::string&amp;amp;&amp;amp; str)&quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">outer</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">inner</span><span class="p">(</span><span class="n">Forward</span><span class="p">(</span><span class="n">value</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">outer</span><span class="p">(</span><span class="n">up</span><span class="p">);</span>
</span><span class='line'><span class="n">outer</span><span class="p">(</span><span class="n">down</span><span class="p">);</span>
</span><span class='line'><span class="n">outer</span><span class="p">(</span><span class="n">strange</span><span class="p">());</span>
</span><span class='line'><span class="n">outer</span><span class="p">(</span><span class="n">charm</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
而我們第一版的Forward的實作
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">Forward</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">return</span> <span class="k">static_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
輸出結果則是
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="n">inner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="n">inner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">str</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
從上面知道，value是個左值，所以Type是U&amp;，T被推導成U，T&amp;&amp;被強制轉換成右值，所以輸出的結果如上。避免的方法就是強迫加上template參數。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">outer</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">inner</span><span class="p">(</span><span class="n">Forward</span><span class="o">&lt;</span><span class="n">t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
重新執行程式，這下結果符合我們的需求了
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="n">inner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="n">inner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">str</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
這邊還有幾點要說明的
之前的範例，value是左值，而T可能是U&amp;或是U，T&amp;的結果是U&amp;，可以繫結住左值沒有問題。萬一Forward的參數是個右值怎麼辦？
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">inner</span><span class="p">(</span><span class="n">Forward</span><span class="o">&lt;</span><span class="n">t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">string</span><span class="p">()));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
我們需要另外一個function，解決function resolution的問題。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">Forward</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">return</span> <span class="k">static_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在傳進來的是個右值時，T被推導成U。T&amp;&amp;正好可以綁定一個Rvalue，解決上面的問題。不過問題又來了，如果是左值的話，T是U&amp;，T&amp;是U&amp;，T&amp;&amp;還是U&amp;，變成兩個function擁有兩個一模一樣的參數型態，Compiler不知道該選哪個。
解決方案就是套用上面Move所引進的RemoveReference，還原成Primitive Type。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">Forward</span><span class="p">(</span><span class="k">typename</span> <span class="n">RemoveReference</span><span class="o">&lt;</span><span class="n">t</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">return</span> <span class="k">static_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">Forward</span><span class="p">(</span><span class="k">typename</span> <span class="n">RemoveReference</span><span class="o">&lt;</span><span class="n">t</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">return</span> <span class="k">static_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
這樣子有另外一個好處，這個方案禁止了型別推導，不會再有`Forward(value)`的存在，編譯時期就能指出錯誤。</t></typename></t></typename></typename></t></t></typename></typename></typename></t></t></typename></typename></typename></typename></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lambda Expression in C++11]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/01/28/lambda-expression-in-c-plus-plus-0x/"/>
    <updated>2013-01-28T22:58:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/01/28/lambda-expression-in-c-plus-plus-0x</id>
    <content type="html"><![CDATA[<p>C++0x引進了<code>Lambda Expression</code>，這功能其實也不新鮮了，在其他語言都有類似的觀念。
為了處理Callback function，做了很多的改進
同樣的，我們從C語言時期看起。</p>

<h2 id="c">C時期</h2>
<p>C語言只有一種方式處理callback function，<strong>function pointer</strong>。
像這個樣子
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">add2</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">operate</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="n">op2</span> <span class="n">func</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">operate</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">add2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Function Pointer的方式處理Callback function非常經典，幾乎可以在所有純C語言開發的程式碼看到他。不過還是有可以改進的地方，例如</p>

<ul>
  <li>速度: 由於傳進來的是指標，只能間接呼叫，無法有足夠的資訊做最佳化。</li>
  <li>狀態: Function比較難保存運行中的特定狀態。</li>
</ul>

<h2 id="c98">C++98時期</h2>
<p>C++的Functor(仿凾式)就是因此而生的，透過<code>overload operator()</code>，來改進上述所無法缺憾。搭配template的使用，使其應用更具彈性。可以同時支援Callback function跟Functor兩種形式。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">Add2</span> <span class="p">{</span>
</span><span class='line'>	<span class="kt">int</span> <span class="n">operator</span><span class="p">()(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">sub2</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="n">template</span> <span class="o">&lt;</span><span class="kr">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">operate</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="n">T</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">callback</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">operate</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">Add2</span><span class="p">());</span>
</span><span class='line'><span class="n">operate</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">sub2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></typename></p>

<p>之後有人想要將class member method跟static class method也包裝成Functor的形式，有<code>Loki</code>跟<code>Boost</code>兩大主流為主。這裡就不多談了，在C++0x中也將boost的bind跟function列入TR1裡，可以很方便的產生Functor。</p>

<h2 id="c0x">C++0x時期</h2>
<p>Functor雖好，不過每要新增一個新功能，就要寫一個function object，如果是只被使用一次的functor，維護這段程式碼需要付出成本，
因此就產生了一個暱名函數(anonymous function)，像這樣。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">for_each</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="n">cout</span> <span class="err">« </span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">cout</span> <span class="err">« ”</span> <span class="n">even</span> <span class="err">“</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">cout</span> <span class="err">« ”</span> <span class="n">odd</span> <span class="err">“</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
詳細的語言規範可以參考<a href="http://msdn.microsoft.com/en-us/library/dd293603%28v=VS.100%29.aspx">MSDN的資料</a>。透過跟程式碼上下文互動，達到非常有趣的效果。</p>

<h2 id="lambda-trick">Lambda Trick</h2>
<p>之前我們介紹過unique_ptr，用來管理動態記憶體，非memory的Resource該怎麼處理，此時就是ScopeGuard登場的時候
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">class</span> <span class="n">ScopeGuard</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="nl">public:</span>
</span><span class='line'>    <span class="n">explicit</span> <span class="n">ScopeGuard</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">void</span><span class="p">()</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">onExitScope</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span> <span class="n">onExitScope</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">onExitScope</span><span class="p">),</span> <span class="n">dismissed</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;~</span><span class="n">ScopeGuard</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">dismissed_</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">onExitScope_</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Dismiss</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">dismissed_</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">void</span><span class="p">()</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">onExitScope</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bool</span> <span class="n">dismissed</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">private</span><span class="o">:</span> <span class="c1">// noncopyable</span>
</span><span class='line'>    <span class="n">ScopeGuard</span><span class="p">(</span><span class="n">ScopeGuard</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;);</span>
</span><span class='line'>    <span class="n">ScopeGuard</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">operator</span><span class="o">=</span><span class="p">(</span><span class="n">ScopeGuard</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">HANDLE</span> <span class="n">h</span> <span class="o">=</span> <span class="n">CreateFile</span><span class="p">(</span><span class="err">…</span><span class="p">);</span>
</span><span class='line'>	<span class="n">ScopeGuard</span> <span class="n">onExit</span><span class="p">([</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;]</span> <span class="p">{</span> <span class="n">CloseHandle</span><span class="p">(</span><span class="n">h</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'>	<span class="c1">// do smoething </span>
</span><span class='line'>	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
或者將不同function signature，由於要經過相同的處理流程，於是用lambda expression隱藏了細節，以下是<a href="http://directxtk.codeplex.com/">DirectX ToolKit</a>的部分程式碼。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kr">typename</span> <span class="n">T</span><span class="p">,</span> <span class="kr">typename</span> <span class="n">TCreateFunc</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">T</span><span class="o">*</span> <span class="n">DemandCreate</span><span class="p">(</span><span class="n">Microsoft</span><span class="o">::</span><span class="n">WRL</span><span class="o">::</span><span class="n">ComPtr</span><span class="o">&lt;</span><span class="n">t</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">comPtr</span><span class="p">,</span> <span class="n">TCreateFunc</span> <span class="n">createFunc</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">T</span><span class="o">*</span> <span class="n">result</span> <span class="o">=</span> <span class="n">comPtr</span><span class="p">.</span><span class="n">Get</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">t</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Create the new object.</span>
</span><span class='line'>    <span class="n">ThrowIfFailed</span><span class="p">(</span>
</span><span class='line'>    	<span class="n">createFunc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="n">comPtr</span><span class="p">.</span><span class="n">Attach</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">result</span><span class="p">;</span> <span class="p">}</span> <span class="n">ID3D11SamplerState</span><span class="o">*</span> <span class="n">CommonStates</span><span class="o">::</span><span class="n">LinearClamp</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">DemandCreate</span><span class="p">(</span><span class="n">pImpl</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">linearClamp</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;](</span><span class="n">ID3D11SamplerState</span><span class="o">**</span> <span class="n">pResult</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">pImpl</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">CreateSamplerState</span><span class="p">(</span><span class="n">D3D11_FILTER_MIN_MAG_MIP_LINEAR</span><span class="p">,</span> <span class="n">D3D11_TEXTURE_ADDRESS_CLAMP</span><span class="p">,</span> <span class="n">pResult</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span> <span class="p">}</span> <span class="n">ID3D11DepthStencilState</span><span class="o">*</span> <span class="n">CommonStates</span><span class="o">::</span><span class="n">DepthRead</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">DemandCreate</span><span class="p">(</span><span class="n">pImpl</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">depthRead</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;](</span><span class="n">ID3D11DepthStencilState</span><span class="o">**</span> <span class="n">pResult</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">pImpl</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">CreateDepthStencilState</span><span class="p">(</span><span class="nb">true</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="n">pResult</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div> 可以看得出來，DemandCreate處理的流程相同，但是船進去的type跟Callback function不同，就能達到一般化的效果，這也是我目前看到最有趣的例子。
</code></pre>
]]></content>
  </entry>
  
</feed>
