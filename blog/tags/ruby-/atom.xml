<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ruby, | 第十三號艦隊]]></title>
  <link href="http://HungMingWu.github.com/blog/tags/ruby-/atom.xml" rel="self"/>
  <link href="http://HungMingWu.github.com/"/>
  <updated>2013-07-03T23:12:09+08:00</updated>
  <id>http://HungMingWu.github.com/</id>
  <author>
    <name><![CDATA[吳小明]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Duck Typing]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/06/20/duck-typing/"/>
    <updated>2013-06-20T21:47:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/06/20/duck-typing</id>
    <content type="html"><![CDATA[<p>最近在看Dynamic programming language的時候，注意到了這個特性。
根據<a href="http://en.wikipedia.org/wiki/Duck_typing">Wiki給的定義</a></p>

<p><blockquote><p>When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.</p></blockquote></p>

<p>一般OOP的觀念，就是定義一組Interface為公約數。不受Interface的約束，而動態語言是在執行時檢查是否滿足所需條件。</p>

<p>以下是Ruby的範例</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Duck</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quack</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="err">“</span><span class="no">Quaaaaaack</span><span class="o">!</span><span class="err">”</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def feathers</span>
</span><span class='line'><span class="sr">    puts “The duck has white and gray feathers.”</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quack</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="err">“</span><span class="no">The</span> <span class="n">person</span> <span class="n">imitates</span> <span class="n">a</span> <span class="n">duck</span><span class="o">.</span><span class="err">”</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def feathers</span>
</span><span class='line'><span class="sr">    puts “The person takes a feather from the ground and shows it.”</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">in_the_forest</span> <span class="n">duck</span>
</span><span class='line'>  <span class="n">duck</span><span class="o">.</span><span class="n">quack</span>
</span><span class='line'>  <span class="n">duck</span><span class="o">.</span><span class="n">feathers</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def game</span>
</span><span class='line'><span class="sr">  donald = Duck.new</span>
</span><span class='line'><span class="sr">  john = Person.new</span>
</span><span class='line'><span class="sr">  in_the_forest donald</span>
</span><span class='line'><span class="sr">  in_the_forest john</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">game</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>動態語言的特性，就是在執行的時刻檢查類別的完整性，如果把上面Person的feathers拿掉，也必須在執行時才會發現錯誤。</p>

<p>如果是傳統競泰語言的話，如何顯示這種特性
C++有兩種方式。</p>

<p>一者是上面介紹的<code>Interface contract</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">IAnimal</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">Quack</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">Feathers</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Duck</span> <span class="o">:</span> <span class="k">public</span> <span class="n">IAnimal</span> <span class="p">{};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="o">:</span> <span class="k">public</span> <span class="n">IAnimal</span>  <span class="p">{};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">in_the_forest</span><span class="p">(</span><span class="n">IAnimal</span> <span class="o">*</span><span class="n">pDuck</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">pDuck</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Quack</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pDuck</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Feathers</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>這種方式可以在Runtime的時候傳入某個滿足此Contract的物件，因此改變其行為。
不過缺點也是顯而易見的，一旦介面修改之後，所有有關的程式碼都要更著修改。所以一般的建議就是一旦介面固定之後就不要更改。</p>

<p>因此衍生了第二種方法，Template。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Duck</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">Quack</span><span class="p">();</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">Feathers</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">Quack</span><span class="p">();</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">Feathers</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Program</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">duck</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">duck</span><span class="p">.</span><span class="n">Quack</span><span class="p">();</span>
</span><span class='line'>	<span class="n">duck</span><span class="p">.</span><span class="n">Feathers</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></typename></p>

<p>C++的Template會在C編譯時檢查所有約束條件，因此叫做<code>Static Polymorphism</code>，跟用Interface的<code>Dynamic Polymorphism</code>不同，Runtime沒有擴展性。</p>
]]></content>
  </entry>
  
</feed>
