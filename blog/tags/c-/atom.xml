<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: C++, | 第十三號艦隊]]></title>
  <link href="http://HungMingWu.github.com/blog/tags/c-/atom.xml" rel="self"/>
  <link href="http://HungMingWu.github.com/"/>
  <updated>2013-07-04T21:43:49+08:00</updated>
  <id>http://HungMingWu.github.com/</id>
  <author>
    <name><![CDATA[吳小明]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compile LLVM &amp; Clang]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/07/04/compile-llvm-and-clang/"/>
    <updated>2013-07-04T21:40:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/07/04/compile-llvm-and-clang</id>
    <content type="html"><![CDATA[<p>隨著LLVM 3.3版本出來，記錄一下如河編譯，編譯環境是CentOS 6。
使用<strong>CMake</strong>和<strong>Ninja</strong>來兩套工具編譯。</p>

<p>CMake是用來產生個平台(Windows/MacOSX/Linux/FreeBSD等)建置專案的解決方案，在Visual Studio產生Solutions，在Linux產生正統的Makefile。 更多的CMake用法可以在網路找到。
而Ninja是用來加速編譯的過程，新版的CMake就能直接產生Ninja的build configuration。
這裡是一篇<a href="http://cyukang.com/2012/12/13/have-a-try-for-ninja.html">Ninja 的簡易使用說明</a></p>

<h2 id="section">前期作業</h2>
<p>編譯及安裝Ninja
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/martine/ninja.git
</span><span class='line'>$ git checkout release
</span><span class='line'>$ ./bootstrap.py
</span><span class='line'>cp ninja /usr/bin/</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>編譯及安裝CMake
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://cmake.org/stage/cmake.git
</span><span class='line'>$ cd cmake
</span><span class='line'>$ git checkout next
</span><span class='line'>$ ./bootstrap
</span><span class='line'>$ make
</span><span class='line'>$ sudo make install</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="section-1">編譯</h2>

<p>假設已經把<strong>LLVM</strong>的程式碼且放到<code>llvm</code>的目錄底下，將<strong>Clang</strong>的程式碼放到<code>llvm/tools/clang</code>的目錄底下，和<strong>Clang Tools Extra</strong>的程式碼放在<code>llvm/tools/clang/tools/extra</code>底下。
建立一個build目錄放置CMake的設定黨，由於CMake支援<code>Out-of-source Build</code>技術，原先的目錄可以不遭受污染，就算失敗就只要砍掉build的目錄即可。我們使用Out-of-source Build的方式來建置Makefile。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd llvm
</span><span class='line'>$ mkdir build &amp;&amp; cd build
</span><span class='line'>$ cmake -G Ninja -DLLVM_BUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX:PATH=/usr/local ..
</span><span class='line'>$ ninja
</span><span class='line'>$ ninja check		# Test LLVM only.
</span><span class='line'>$ ninja clang-test	# Test Clang only.
</span><span class='line'>$ sudo ninja install</span></code></pre></td></tr></table></div></figure></notextile></div>
這裡的<code>cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local</code> 等價於傳統的 <code>./configure --prefix=/usr/local/</code>方式</p>

<h2 id="section-2">再度測試</h2>
<p>當安裝完之後，我們使用Clang當做Complier編譯自己，我們使用ccmake來設定編譯參數。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ccmake ..</span></code></pre></td></tr></table></div></figure></notextile></div>
<strong>ccmake</strong>可以使用GUI來改變控制變數，在這個案例我們把<code>CMAKE_CXX_COMPILER</code>改成<code>/usr/local/bin/clang++</code>，按<code>c</code>重新configure，且按<code>g</code>重新生成。
之後我們就可以用
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ninja</span></code></pre></td></tr></table></div></figure></notextile></div>
來測試是否正確運行了。</p>
]]></content>
  </entry>
  
</feed>
