<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[第十三號艦隊]]></title>
  <link href="http://HungMingWu.github.com/atom.xml" rel="self"/>
  <link href="http://HungMingWu.github.com/"/>
  <updated>2013-06-05T23:23:57+08:00</updated>
  <id>http://HungMingWu.github.com/</id>
  <author>
    <name><![CDATA[吳小明]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Variadic templates]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/06/03/variadic-templates/"/>
    <updated>2013-06-03T22:44:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/06/03/variadic-templates</id>
    <content type="html"><![CDATA[<p>這次介紹另一個C++11重要的特性<strong>Variadic templates</strong></p>

<h2 id="printf">從printf說起</h2>
<p>相信每個寫程式的人，就算沒用過printf，也聽過printf的名字，printf的徒子徒孫大概跟Unix的子孫一樣多。而一般的printf使用方式就類似如此。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">my_printf</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">format</span><span class="p">,</span> <span class="p">...);</span>
</span><span class="line"><span class="n">my_printf</span><span class="p">(</span><span class="s">&quot;%d + %d = %d&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在設計一個通用函數的時候，無法知道後面參數有多少個，因此需要一個支持不定參數的機制。
從上面的程式碼看出，我們支援不定參數的語法就是<code>...</code>來表示。
而在C語言如何實做這樣的機制，可以參考<a href="http://msdn.microsoft.com/en-us/library/kb57fad8%28v=vs.80%29.aspx">MSDN上的範例</a>。</p>

<h2 id="marco">Marco也支援不定參數</h2>
<p>在C99標準裡，Macro支持不定參數，不過Visual Studio至今不支援C99。
我們可以寫類似這樣的Macro</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define dprintf(enable, ...) dprintf_impl(__FILE__, __LINE__, enable, __VA_ARGS__)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在參數列的最後面寫 …，然後就可以用 <strong>VA_ARGS</strong> 代表 … 所傳入的參數。</p>

<h2 id="template">如何讓Template支援不定參數</h2>

<h3 id="c98">從C++98談起</h3>
<p>在實作Command Design Pattern的時候，常常需要把外部函數的參數原封不動的傳遞至內部函數，解決方法大概就像這樣。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#define P1 typename T1</span>
</span><span class="line"><span class="cp">#define A1 T1 &amp;&amp;v1</span>
</span><span class="line"><span class="cp">#define V1 v1</span>
</span><span class="line"><span class="cp">#define P2 typename T1, typename T2</span>
</span><span class="line"><span class="cp">#define A2 T1 &amp;&amp;v1, T2 &amp;&amp;v2</span>
</span><span class="line"><span class="cp">#define V2 v1, v2</span>
</span><span class="line"><span class="cp">#define P3 typename T1, typename T2, typename T3</span>
</span><span class="line"><span class="cp">#define A3 T1 &amp;&amp;v1, T2 &amp;&amp;v2, T3 &amp;&amp;v3</span>
</span><span class="line"><span class="cp">#define V3 v1, v2, v3</span>
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="n">P1</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">outer</span><span class="p">(</span><span class="n">A1</span><span class="p">)</span> <span class="p">{</span> <span class="n">inner</span><span class="p">(</span><span class="n">V1</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="n">P2</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">outer</span><span class="p">(</span><span class="n">A2</span><span class="p">)</span> <span class="p">{</span> <span class="n">inner</span><span class="p">(</span><span class="n">V2</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="n">P3</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">outer</span><span class="p">(</span><span class="n">A3</span><span class="p">)</span> <span class="p">{</span> <span class="n">inner</span><span class="p">(</span><span class="n">V3</span><span class="p">);</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這方案的缺點大概有以下幾點
- 可代入的參數數量有限 (雖然可以手動擴充)
- 程式碼難以維護，核心的程式碼不多，但是重複的程式碼很多
- 編譯速度緩慢
- 極度依賴Preprocessor
加上C++11的新特性之後，問題變得更複雜了。</p>

<h3 id="c11">C++11時期</h3>
<p>來個最簡單的範例</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span><span class="p">...</span> <span class="n">Args</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">class</span> <span class="nc">VariadicTemplate</span> <span class="p">{};</span>
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="p">...</span><span class="n">Args</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">class</span> <span class="nc">VariadicTemplate1</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line"><span class="n">VariadicTemplate</span><span class="o">&lt;&gt;</span> <span class="n">a</span><span class="p">;</span>				<span class="c1">// VariadicTemplate1接受無任何型別</span>
</span><span class="line"><span class="n">VariadicTemplate</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line"><span class="n">VariadicTemplate1</span><span class="o">&lt;&gt;</span> <span class="n">c</span><span class="p">;</span>				<span class="c1">// VariadicTemplate1至少需要一個型別，編譯器會報錯</span>
</span><span class="line"><span class="n">VariadicTemplate1</span><span class="o">&lt;</span><span class="kt">double</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="n">string</span><span class="o">&gt;</span> <span class="n">d</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在Args左邊出現<code>...</code>時，表示Args是一個<strong>Template type parameter pack</strong>，如上面的最後一行，T就是double，而Args就是int, string，除了類別之外，非類別的template paramter也可以這樣使用。如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="kt">unsigned</span> <span class="p">...</span><span class="n">dims</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Array</span> <span class="p">{};</span>
</span><span class="line"><span class="n">Array</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">&gt;</span> <span class="n">arr</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而Function template也可以像Class Template一樣使用不定參數</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="p">...</span><span class="n">Args</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">void</span> <span class="n">func</span><span class="p">(</span><span class="n">Args</span> <span class="p">...</span><span class="n">args</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這裡的Args不是Type，args也不是一個value，所以以下的程式碼會出問題</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">typedef</span> <span class="n">Args</span> <span class="n">MyList</span><span class="p">;</span>
</span><span class="line"><span class="n">MyList</span> <span class="n">var</span><span class="p">;</span>
</span><span class="line"><span class="k">auto</span> <span class="n">copy</span> <span class="o">=</span> <span class="n">args</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而sizeof也跟著Variadic templates而新增新特性，<code>sizeof...</code>可以印出Args到底有多少個參數</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span><span class="p">...</span> <span class="n">Args</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">VariadicTemplate</span> <span class="p">{</span>
</span><span class="line">    <span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">...(</span><span class="n">Args</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">VariadicTemplate</span><span class="o">&lt;&gt;::</span><span class="n">size</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>	<span class="c1">// 0</span>
</span><span class="line"><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">VariadicTemplate</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;::</span><span class="n">size</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section">如何解決之前的問題</h3>
<p>用新的特性同時解決perfect forwarding跟Variadic templates</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="p">...</span><span class="n">Ts</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">void</span> <span class="n">outer</span><span class="p">(</span><span class="n">Ts</span><span class="o">&amp;&amp;</span> <span class="p">...</span><span class="n">args</span><span class="p">)</span> <span class="p">{</span> <span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">Ts</span><span class="o">&gt;</span><span class="p">(</span><span class="n">args</span><span class="p">)...);</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">如何抽取單一個型別與參數</h3>
<p>透過Template specification來實作</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;&amp;</span><span class="n">v</span><span class="p">);</span>
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="p">...</span><span class="n">Args</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;&amp;</span><span class="n">v</span><span class="p">,</span> <span class="n">Args</span> <span class="p">...</span><span class="n">args</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="n">print</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">v</span><span class="p">));</span>
</span><span class="line">	<span class="n">print</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">Args</span><span class="o">&gt;</span><span class="p">(</span><span class="n">args</span><span class="p">)...);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>還有其他未介紹到的特性，基於所知有限&lt;無法完全說明，可以參考<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2080.pdf">Variadic Templates (Revision 3) Draft</a>跟<a href="http://channel9.msdn.com/Events/GoingNative/GoingNative-2012/Variadic-Templates-are-Funadic">Variadic Templates are Funadic</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell beginner tutorial]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/05/24/haskell-beginner-tutorial/"/>
    <updated>2013-05-24T22:04:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/05/24/haskell-beginner-tutorial</id>
    <content type="html"><![CDATA[<p>前一陣子都在忙C++ Grandmaster的比賽，沒什麼時間紀錄一些東西，最近對Functional Programming感到興趣，找Haskell當作的入門的開始。做些紀錄。</p>

<h2 id="section">安裝</h2>
<p>以Ubuntu為例，先安裝Haskell。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">apt</span>-get install ghc
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接著就能用<code>ghci</code>進入直譯器了，用<code>Ctrl+D</code>退出ghci。</p>

<h2 id="script-programming">Script Programming</h2>
<p>有兩種方式可以達成</p>

<h3 id="ghci">在ghci當中載入</h3>
<p>首先我們先來寫一個<code>test.hs</code>文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lang: bash</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cat &gt; test.hs &lt;&lt; EOF
</span><span class="line">add x y = x + y
</span><span class="line">EOF</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在ghci中載入test.hs</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lang: bash</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ghci
</span><span class="line">Prelude&gt; :l test
</span><span class="line">[1 of 1] Compiling Main             ( test.hs, interpreted )
</span><span class="line">Ok, modules loaded: Main.
</span><span class="line">*Main&gt; add 3 4
</span><span class="line">7</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="script-">當成一般的 Script 使用</h3>
<p>這個方案是要加上 <code>#!/usr/bin/runghc</code> 且Script當中需要有<code>main</code>存在
以下是個範例</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lang: bash</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cat &gt; hello.hs &lt;&lt; EOF
</span><span class="line">&gt; #!/usr/bin/runghc
</span><span class="line">&gt; main=putStrLn "Hello, Haskell from elf"
</span><span class="line">&gt; EOF
</span><span class="line">$ chmod +x hello.hs
</span><span class="line">$ ./hello.hs 
</span><span class="line">Hello, Haskell</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">編譯成執行檔</h2>
<p>同樣的，這個方案也需要有<code>main</code>存在</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lang: bash</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ghc hello.hs -o hello</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="haskell">其他有關Haskell的教學</h2>
<p>網路上可以找到不少，先以這幾個當入門教材</p>

<p><a href="http://www.haskell.org/haskellwiki/Tw/Haskell%E5%85%A5%E9%96%80%E7%9A%845%E5%80%8B%E6%AD%A5%E9%A9%9F">Haskell入門的5個步驟</a></p>

<p><a href="http://www.haskellcn.com/haskellbook/Haskellstep/">Haskell在线教程</a></p>

<p><a href="http://www.haskell.org/haskellwiki/Tutorials">Tutorials - Haskell</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rvalue reference, std::move and std::forward]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/02/18/rvalue-reference/"/>
    <updated>2013-02-18T20:50:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/02/18/rvalue-reference</id>
    <content type="html"><![CDATA[<p>這篇文章主要是<a href="http://blogs.msdn.com/b/vcblog/archive/2009/02/03/rvalue-references-c-0x-features-in-vc10-part-2.aspx">Rvalue References: C++0x Features in VC10, Part 2</a>的閱讀筆記，在原文撰寫過程當中，規格有所變動，因此根據最新的規則做補充說明。</p>

<h2 id="copy-problems">Copy Problems</h2>
<p>C++98/03的時候，最令人詬病的問題，就是建立太多臨時物件，Value Semantics的意思就是複製出來的物件跟原先是獨立的，不會互相干擾</p>

<h2 id="lvalue-and-rvalue">Lvalue and Rvalue</h2>
<p>在C++98/03時期，有這麼一條規則<code>Every C++ expression is either an lvalue or an rvalue.</code>，Lvalue是在運算過後留下來的續存物件，而Rvalue是運算過後生命期就結束的臨時物件。
殂此之外，C++98/03裡還有一條規則<code>A function call is an lvalue if and only if the result type is a reference</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="n">string</span> <span class="n">one</span><span class="p">(</span><span class="s">&quot;one&quot;</span><span class="p">);</span>
</span><span class="line"><span class="k">const</span> <span class="n">string</span> <span class="n">two</span><span class="p">(</span><span class="s">&quot;two&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">string</span> <span class="n">three</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&quot;three&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="k">const</span> <span class="n">string</span> <span class="n">four</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&quot;four&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">one</span><span class="p">;</span>     <span class="c1">// modifiable lvalue</span>
</span><span class="line"><span class="n">two</span><span class="p">;</span>     <span class="c1">// const lvalue</span>
</span><span class="line"><span class="n">three</span><span class="p">();</span> <span class="c1">// modifiable rvalue</span>
</span><span class="line"><span class="n">four</span><span class="p">();</span>  <span class="c1">// const rvalue</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Type&amp;可以繫結到一個modifiable lvalue，而如果要繫結到modifiable rvalue，C++規定禁止(Visual C++除外，可以把警告層級從3調到4，會警告你這樣很危險，而gcc跟clang則是輸出錯誤訊息。)</li>
  <li>const Type&amp;可以繫結到任何一種型態，不過不能對Rvalue做任何修改，因此不能對即將消滅的臨時物件採取任何行動</li>
</ul>

<p>而在C++11之後，引進了<code>Rvalue reference</code>，解決了這個問題。</p>

<ul>
  <li>Type&amp;&amp;可以繫結到一個modifiable rvalue，而不能繫結到modifiable lvalue，需要強制轉型。</li>
  <li>const Type&amp;&amp;可以繫結任何形態</li>
</ul>

<p>每個reference都有一個名字，所以Bind到Rvalue的refernce，他是一個<strong>Lvalue</strong>，因此以下的程式碼。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span><span class="p">)</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;print(const string&amp;)&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;&amp;</span><span class="p">)</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;print(string&amp;&amp;)&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="n">RvalueTest</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span> <span class="n">print</span><span class="p">(</span><span class="n">str</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="n">RvalueTest</span><span class="p">(</span><span class="n">string</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在RValueTest執行結束之前，str是個合法的物件，因此被當作Lvalue，會執行第一個print。</p>

<p>為了學習Rvalue的觀念，自行打造move跟forward函數。</p>

<p>先看C++11之後引進的Reference Collapsing Rules</p>

<ul>
  <li>T&amp; + &amp; =&gt; T&amp;</li>
  <li>T&amp;&amp; + &amp; =&gt; T&amp;</li>
  <li>T&amp; + &amp;&amp; =&gt; T&amp;</li>
  <li>T&amp;&amp; + T&amp;&amp; =&gt; T&amp;&amp;</li>
</ul>

<p>而Move的用途就是明確指出不管物件是Lvalue或Rvalue，一律轉成Rvalue就是了。
而Forward的用途把外面的參數跟語意原封不動的傳進去內部，是Lvalue就是Lvalue，而Rvalue就是Rvalue。
先從比較簡單的Move開始看起，我門打造的第一版Move大概像這樣。
由於Move是個template function，必須進行Template Argument Deduction，此時引進了一條新的規則。
如果傳進來的是Lvalue的話，將會推導成T&amp;，反之如果是Rvalue的話，就會推導成T(根據Reference Collapsing Rules，T和T&amp;&amp;都符合要求，為了解決歧異性，這邊強制要求推導成T)</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">Move</span><span class="p">(....</span> <span class="n">value</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&amp;&amp;&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這邊先來決定如何傳遞參數，<strong>Call by value</strong>第一個被否決，接著就是<code>T&amp;</code>跟<code>T&amp;&amp;</code>的選擇，根據前面的Reference Collapsing Rules，如果是<code>T&amp;</code>的話一律會摺疊成<code>T&amp;</code>，而T&amp;無法繫結至modifiable rvalue，而如果是<code>T&amp;&amp;</code>的話，不管Lvalue跟Rvalue都可以順利繫結。</p>

<p>接著我們來測試第一版的程式碼</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="n">quark</span><span class="p">(</span><span class="n">Move</span><span class="p">(</span><span class="n">up</span><span class="p">));</span>
</span><span class="line"><span class="n">quark</span><span class="p">(</span><span class="n">Move</span><span class="p">(</span><span class="n">down</span><span class="p">));</span>
</span><span class="line"><span class="n">quark</span><span class="p">(</span><span class="n">Move</span><span class="p">(</span><span class="n">strange</span><span class="p">()));</span>
</span><span class="line"><span class="n">quark</span><span class="p">(</span><span class="n">Move</span><span class="p">(</span><span class="n">charm</span><span class="p">()));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>印出的結果是</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="nl">t:</span> <span class="n">up</span>
</span><span class="line"><span class="nl">T:</span> <span class="n">string</span><span class="o">&amp;</span>
</span><span class="line"><span class="n">T</span><span class="o">&amp;&amp;:</span> <span class="n">string</span><span class="o">&amp;</span>
</span><span class="line">
</span><span class="line"><span class="nl">t:</span> <span class="n">down</span>
</span><span class="line"><span class="nl">T:</span> <span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span>
</span><span class="line"><span class="n">T</span><span class="o">&amp;&amp;:</span> <span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span>
</span><span class="line">
</span><span class="line"><span class="nl">t:</span> <span class="n">strange</span><span class="p">()</span>
</span><span class="line"><span class="nl">T:</span> <span class="n">string</span>
</span><span class="line"><span class="n">T</span><span class="o">&amp;&amp;:</span> <span class="n">string</span><span class="o">&amp;&amp;</span>
</span><span class="line">
</span><span class="line"><span class="nl">t:</span> <span class="n">charm</span><span class="p">()</span>
</span><span class="line"><span class="nl">T:</span> <span class="k">const</span> <span class="n">string</span>
</span><span class="line"><span class="n">T</span><span class="o">&amp;&amp;:</span> <span class="k">const</span> <span class="n">string</span><span class="o">&amp;&amp;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>顯然結果錯了，原因在於實際參數是Lvalue的話，T會被推導成U&amp;，而T&amp;&amp;的結果依然是U&amp;，變成Move傳回去的語意是個Lvalue，因此導致上面的結果。
所以我們要做的，就是把U&amp;或U&amp;&amp;一律轉成U&amp;&amp;，也就是std::remove_refernce存在的理由。改寫我們的程式，先用RemoveRefenece取得Primitive Type, 然後加上&amp;&amp;之後就可以得到正確的值。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">RemoveReference</span> <span class="p">{</span>
</span><span class="line">	<span class="k">typedef</span> <span class="n">T</span> <span class="n">type</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">RemoveReference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&amp;&gt;</span> <span class="p">{</span>
</span><span class="line">	<span class="k">typedef</span> <span class="n">T</span> <span class="n">type</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">RemoveReference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&amp;&amp;&gt;</span> <span class="p">{</span>
</span><span class="line">	<span class="k">typedef</span> <span class="n">T</span> <span class="n">type</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">typename</span> <span class="n">RemoveReference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&amp;&amp;</span> <span class="n">Move</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">t</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">RemoveReference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&amp;&amp;&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>gcc的實作就類似於這樣。
接著來討論forward該怎麼做，從上面我們可以知道，我們只能用T&amp;&amp;來傳遞參數。
先來一組helper function來驗證程式的正確性。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="kt">void</span> <span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;inner(std::string &amp;str)&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="n">inner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;inner(const std::string &amp;str)&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="n">inner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;inner(const std::string&amp;&amp; str)&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;inner(std::string&amp;&amp; str)&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">void</span> <span class="n">outer</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="n">inner</span><span class="p">(</span><span class="n">Forward</span><span class="p">(</span><span class="n">value</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">outer</span><span class="p">(</span><span class="n">up</span><span class="p">);</span>
</span><span class="line"><span class="n">outer</span><span class="p">(</span><span class="n">down</span><span class="p">);</span>
</span><span class="line"><span class="n">outer</span><span class="p">(</span><span class="n">strange</span><span class="p">());</span>
</span><span class="line"><span class="n">outer</span><span class="p">(</span><span class="n">charm</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而我們第一版的Forward的實作</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">Forward</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&amp;&amp;&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>輸出結果則是</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">)</span>
</span><span class="line"><span class="n">inner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">)</span>
</span><span class="line"><span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">)</span>
</span><span class="line"><span class="n">inner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>從上面知道，value是個左值，所以Type是U&amp;，T被推導成U，T&amp;&amp;被強制轉換成右值，所以輸出的結果如上。避免的方法就是強迫加上template參數。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">void</span> <span class="n">outer</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="n">inner</span><span class="p">(</span><span class="n">Forward</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>重新執行程式，這下結果符合我們的需求了</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span>
</span><span class="line"><span class="n">inner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span>
</span><span class="line"><span class="n">inner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">)</span>
</span><span class="line"><span class="n">inner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這邊還有幾點要說明的
之前的範例，value是左值，而T可能是U&amp;或是U，T&amp;的結果是U&amp;，可以繫結住左值沒有問題。萬一Forward的參數是個右值怎麼辦？</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="n">inner</span><span class="p">(</span><span class="n">Forward</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">string</span><span class="p">()));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我們需要另外一個function，解決function resolution的問題。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">Forward</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&amp;&amp;&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在傳進來的是個右值時，T被推導成U。T&amp;&amp;正好可以綁定一個Rvalue，解決上面的問題。不過問題又來了，如果是左值的話，T是U&amp;，T&amp;是U&amp;，T&amp;&amp;還是U&amp;，變成兩個function擁有兩個一模一樣的參數型態，Compiler不知道該選哪個。
解決方案就是套用上面Move所引進的RemoveReference，還原成Primitive Type。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">Forward</span><span class="p">(</span><span class="k">typename</span> <span class="n">RemoveReference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&amp;&amp;&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">Forward</span><span class="p">(</span><span class="k">typename</span> <span class="n">RemoveReference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&amp;&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&amp;&amp;&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這樣子有另外一個好處，這個方案禁止了型別推導，不會再有<code>Forward(value)</code>的存在，編譯時期就能指出錯誤。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lambda Expression in C++11]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/01/28/lambda-expression-in-c-plus-plus-0x/"/>
    <updated>2013-01-28T22:58:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/01/28/lambda-expression-in-c-plus-plus-0x</id>
    <content type="html"><![CDATA[<p>C++0x引進了<code>Lambda Expression</code>，這功能其實也不新鮮了，在其他語言都有類似的觀念。
為了處理Callback function，做了很多的改進
同樣的，我們從C語言時期看起。</p>

<h2 id="c">C時期</h2>
<p>C語言只有一種方式處理callback function，<strong>function pointer</strong>。
像這個樣子</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">add2</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">operate</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="n">op2</span> <span class="n">func</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">operate</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">add2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Function Pointer的方式處理Callback function非常經典，幾乎可以在所有純C語言開發的程式碼看到他。不過還是有可以改進的地方，例如</p>

<ul>
  <li>速度: 由於傳進來的是指標，只能間接呼叫，無法有足夠的資訊做最佳化。</li>
  <li>狀態: Function比較難保存運行中的特定狀態。</li>
</ul>

<h2 id="c98">C++98時期</h2>
<p>C++的Functor(仿凾式)就是因此而生的，透過<code>overload operator()</code>，來改進上述所無法缺憾。搭配template的使用，使其應用更具彈性。可以同時支援Callback function跟Functor兩種形式。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">Add2</span> <span class="p">{</span>
</span><span class="line">	<span class="kt">int</span> <span class="n">operator</span><span class="p">()(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">	<span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">sub2</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="n">template</span> <span class="o">&lt;</span><span class="kr">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">operate</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="n">T</span> <span class="n">callback</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="n">callback</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">operate</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">Add2</span><span class="p">());</span>
</span><span class="line"><span class="n">operate</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">sub2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>之後有人想要將class member method跟static class method也包裝成Functor的形式，有<code>Loki</code>跟<code>Boost</code>兩大主流為主。這裡就不多談了，在C++0x中也將boost的bind跟function列入TR1裡，可以很方便的產生Functor。</p>

<h2 id="c0x">C++0x時期</h2>
<p>Functor雖好，不過每要新增一個新功能，就要寫一個function object，如果是只被使用一次的functor，維護這段程式碼需要付出成本，
因此就產生了一個暱名函數(anonymous function)，像這樣。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">for_each</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">;</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; even &quot;</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; odd &quot;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>詳細的語言規範可以參考<a href="http://msdn.microsoft.com/en-us/library/dd293603%28v=VS.100%29.aspx">MSDN的資料</a>。透過跟程式碼上下文互動，達到非常有趣的效果。</p>

<h2 id="lambda-trick">Lambda Trick</h2>
<p>之前我們介紹過unique_ptr，用來管理動態記憶體，非memory的Resource該怎麼處理，此時就是ScopeGuard登場的時候</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">class</span> <span class="n">ScopeGuard</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="nl">public:</span>
</span><span class="line">    <span class="n">explicit</span> <span class="n">ScopeGuard</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">()</span><span class="o">&gt;</span> <span class="n">onExitScope</span><span class="p">)</span>
</span><span class="line">        <span class="o">:</span> <span class="n">onExitScope_</span><span class="p">(</span><span class="n">onExitScope</span><span class="p">),</span> <span class="n">dismissed_</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">~</span><span class="n">ScopeGuard</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">dismissed_</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">onExitScope_</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="n">Dismiss</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">dismissed_</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nl">private:</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">()</span><span class="o">&gt;</span> <span class="n">onExitScope_</span><span class="p">;</span>
</span><span class="line">    <span class="n">bool</span> <span class="n">dismissed_</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nl">private:</span> <span class="c1">// noncopyable</span>
</span><span class="line">    <span class="n">ScopeGuard</span><span class="p">(</span><span class="n">ScopeGuard</span> <span class="k">const</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="n">ScopeGuard</span><span class="o">&amp;</span> <span class="n">operator</span><span class="o">=</span><span class="p">(</span><span class="n">ScopeGuard</span> <span class="k">const</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="n">HANDLE</span> <span class="n">h</span> <span class="o">=</span> <span class="n">CreateFile</span><span class="p">(...);</span>
</span><span class="line">	<span class="n">ScopeGuard</span> <span class="n">onExit</span><span class="p">([</span><span class="o">&amp;</span><span class="p">]</span> <span class="p">{</span> <span class="n">CloseHandle</span><span class="p">(</span><span class="n">h</span><span class="p">);</span> <span class="p">});</span>
</span><span class="line">	<span class="c1">// do smoething </span>
</span><span class="line">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>或者將不同function signature，由於要經過相同的處理流程，於是用lambda expression隱藏了細節，以下是<a href="http://directxtk.codeplex.com/">DirectX ToolKit</a>的部分程式碼。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">template</span><span class="o">&lt;</span><span class="kr">typename</span> <span class="n">T</span><span class="p">,</span> <span class="kr">typename</span> <span class="n">TCreateFunc</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">static</span> <span class="n">T</span><span class="o">*</span> <span class="n">DemandCreate</span><span class="p">(</span><span class="n">Microsoft</span><span class="o">::</span><span class="n">WRL</span><span class="o">::</span><span class="n">ComPtr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">comPtr</span><span class="p">,</span> <span class="n">TCreateFunc</span> <span class="n">createFunc</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="n">T</span><span class="o">*</span> <span class="n">result</span> <span class="o">=</span> <span class="n">comPtr</span><span class="p">.</span><span class="n">Get</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">result</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="c1">// Create the new object.</span>
</span><span class="line">        <span class="n">ThrowIfFailed</span><span class="p">(</span>
</span><span class="line">        	<span class="n">createFunc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">result</span><span class="p">)</span>
</span><span class="line">        <span class="p">);</span>
</span><span class="line">        <span class="n">comPtr</span><span class="p">.</span><span class="n">Attach</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">ID3D11SamplerState</span><span class="o">*</span> <span class="n">CommonStates</span><span class="o">::</span><span class="n">LinearClamp</span><span class="p">()</span> <span class="k">const</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">DemandCreate</span><span class="p">(</span><span class="n">pImpl</span><span class="o">-&gt;</span><span class="n">linearClamp</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">ID3D11SamplerState</span><span class="o">**</span> <span class="n">pResult</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">pImpl</span><span class="o">-&gt;</span><span class="n">CreateSamplerState</span><span class="p">(</span><span class="n">D3D11_FILTER_MIN_MAG_MIP_LINEAR</span><span class="p">,</span> <span class="n">D3D11_TEXTURE_ADDRESS_CLAMP</span><span class="p">,</span> <span class="n">pResult</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">ID3D11DepthStencilState</span><span class="o">*</span> <span class="n">CommonStates</span><span class="o">::</span><span class="n">DepthRead</span><span class="p">()</span> <span class="k">const</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">DemandCreate</span><span class="p">(</span><span class="n">pImpl</span><span class="o">-&gt;</span><span class="n">depthRead</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">ID3D11DepthStencilState</span><span class="o">**</span> <span class="n">pResult</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">pImpl</span><span class="o">-&gt;</span><span class="n">CreateDepthStencilState</span><span class="p">(</span><span class="nb">true</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="n">pResult</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看得出來，DemandCreate處理的流程相同，但是船進去的type跟Callback function不同，就能達到一般化的效果，這也是我目前看到最有趣的例子。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From auto_ptr to unique_ptr]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/01/20/from-auto-ptr-to-unique-ptr/"/>
    <updated>2013-01-20T20:17:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/01/20/from-auto-ptr-to-unique-ptr</id>
    <content type="html"><![CDATA[<h2 id="c">C語言時期</h2>
<p>在C語言中，最常遇到的情況就是忘了釋放記憶體，然後造成Memory Leak的問題。
例如以下這段程式</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">LeakDemo</span><span class="p">(</span><span class="kt">char</span> <span class="n">path1</span><span class="p">,</span> <span class="kt">char</span> <span class="n">path2</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="kt">void</span> <span class="o">*</span><span class="n">alloc</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="n">path1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="n">free</span><span class="p">(</span><span class="n">alloc</span><span class="p">);</span>
</span><span class="line">		<span class="k">return</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="n">path2</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class="line">	<span class="n">free</span><span class="p">(</span><span class="n">alloc</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在上面這段程式裡面，path2就忘了釋放記憶體，然後造成Leak。
這是語言上的侷限，只能靠多檢查source code跟使用工具來減少這種問題。</p>

<h2 id="c98">C++98時期</h2>
<p>由於C++有<a href="http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization">RAII idiom</a>之後，對於釋放記憶體的事情就變得簡單很多了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">StackObject</span> <span class="p">{</span>
</span><span class="line">	<span class="kt">void</span> <span class="o">*</span><span class="n">alloc</span><span class="p">;</span>
</span><span class="line">	<span class="n">StackObject</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="n">alloc</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="o">~</span><span class="n">StackObject</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="n">free</span><span class="p">(</span><span class="n">alloc</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">NoLeakDemo</span><span class="p">(</span><span class="kt">char</span> <span class="n">path1</span><span class="p">,</span> <span class="kt">char</span> <span class="n">path2</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="n">StackObject</span> <span class="n">s</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="n">path1</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="n">path2</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class="line">	<span class="k">return</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而為了一般化，STL裡面時做了一個<code>auto_ptr</code>，利用Template跟RAII的觀念來管理記憶體。
## auto_ptr的問題
如果把auto_ptr侷限於上面的用法，不會遇上什麼問題，一旦要搭配現有的程式碼，當參數傳來傳去，問題就出現了其中最嚴重的問題莫過於</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">Test</span><span class="p">(</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">)</span> <span class="p">{}</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="n">auto_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">(</span><span class="n">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span>
</span><span class="line">        <span class="n">Test</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">v</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上的程式碼，看起來沒什麼問題，不過實際執行就Crash了。
auto_ptr的問題是沒有<strong>Copy Semantics</strong>，他的Copy Constructur裡面做的是Move的動作。
以下是auto_ptr的Conpy Constructor實作簡化版</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">template</span> <span class="o">&lt;</span><span class="kr">typename</span> <span class="n">_Tp</span><span class="o">&gt;</span>
</span><span class="line"><span class="n">class</span> <span class="n">auto_ptr</span> <span class="p">{</span>
</span><span class="line"><span class="nl">private:</span>
</span><span class="line">	<span class="n">_Tp</span><span class="o">*</span> <span class="n">_M_ptr</span><span class="p">;</span>
</span><span class="line"><span class="nl">public:</span>
</span><span class="line">	<span class="n">auto_ptr</span><span class="p">(</span><span class="n">auto_ptr</span><span class="o">&amp;</span> <span class="n">__a</span><span class="p">)</span> <span class="n">throw</span><span class="p">()</span> <span class="o">:</span> <span class="n">_M_ptr</span><span class="p">(</span><span class="n">__a</span><span class="p">.</span><span class="n">release</span><span class="p">())</span> <span class="p">{}</span>
</span><span class="line">	<span class="n">_Tp</span><span class="o">*</span> <span class="n">release</span><span class="p">()</span> <span class="n">throw</span><span class="p">()</span>
</span><span class="line">	<span class="p">{</span>
</span><span class="line">		<span class="n">element_type</span><span class="o">*</span> <span class="n">__tmp</span> <span class="o">=</span> <span class="n">_M_ptr</span><span class="p">;</span>
</span><span class="line">		<span class="n">_M_ptr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">		<span class="k">return</span> <span class="n">__tmp</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>於是在執行完Test之後，main中的v裡面的pointer就被清空，無法正常使用。
由於這個緣故，STL的各種容器跟演算法，搭配上auto_ptr或多或少都有問題。在經過多次修改之後還是無法修復，於是auto_ptr在C++0x之後就標繼承<strong>deprecated</strong>了，不建議使用。
由於C++0x引進了Rvalue reference，因此新的unique_ptr就此登場。</p>

<h2 id="uniqueptr">unique_ptr</h2>
<p>unique_ptr能做的事幾乎跟auto_ptr一樣，除了少數例外。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">(</span><span class="n">new</span> <span class="kt">int</span><span class="p">);</span>
</span><span class="line"><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">b</span><span class="p">(</span><span class="n">a</span><span class="p">);</span> <span class="c1">// Compile success, but nosafe</span>
</span><span class="line"><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">new</span> <span class="kt">int</span><span class="p">);</span>
</span><span class="line"><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">d</span><span class="p">(</span><span class="n">c</span><span class="p">);</span> <span class="c1">// Compile error</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>不過你也可以利用C++0x新增的Move Semantics，手動進行Move動作。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">new</span> <span class="kt">int</span><span class="p">);</span>
</span><span class="line"><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">d</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">c</span><span class="p">));</span> <span class="c1">// OK</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>靠著C++0x新增的<a href="http://thbecker.net/articles/rvalue_references/section_01.html">Rvalue Reference</a>，區分出Copy跟Move的差異。看著unique_ptr的實作，他只允許Move Constructor，而不允許Copy Constructor。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">template</span><span class="o">&lt;</span><span class="n">class</span> <span class="n">_Ty</span><span class="p">,</span> <span class="n">class</span> <span class="n">_Dx</span><span class="o">&gt;</span>	
</span><span class="line"><span class="n">class</span> <span class="n">unique_ptr</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="nl">private:</span>
</span><span class="line">	<span class="n">unique_ptr</span><span class="p">(</span><span class="k">const</span> <span class="n">_Myt</span><span class="o">&amp;</span><span class="p">);</span>				<span class="c1">// not defined</span>
</span><span class="line">	<span class="n">unique_ptr</span><span class="o">&amp;</span> <span class="n">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">_Myt</span><span class="o">&amp;</span><span class="p">);</span>		<span class="c1">// not defined</span>
</span><span class="line"><span class="nl">public:</span>
</span><span class="line">	<span class="n">unique_ptr</span><span class="p">(</span><span class="n">unique_ptr</span><span class="o">&amp;&amp;</span> <span class="n">_Right</span><span class="p">)</span> 			<span class="n">_NOEXCEPT</span><span class="p">;</span>
</span><span class="line">	<span class="n">unique_ptr</span><span class="o">&amp;</span> <span class="n">operator</span><span class="o">=</span><span class="p">(</span><span class="n">unique_ptr</span><span class="o">&amp;&amp;</span> <span class="n">_Right</span><span class="p">)</span>	<span class="n">_NOEXCEPT</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果要得到更多的Rvalue Refenece的相關內容，請參考這篇<a href="http://blogs.msdn.com/b/vcblog/archive/2009/02/03/rvalue-references-c-0x-features-in-vc10-part-2.aspx">Rvalue References: C++0x Features in VC10, Part 2</a>。</p>

<h2 id="uniqueptr-1">unique_ptr還能做些什麼</h2>

<p>由於C++0x引進了Move Semantics，連帶的STL所有Container跟Algorithmer都支援Move Semantics了，因此這樣的程式碼就變得可行了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">typedef</span> <span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">UniCharPtr</span><span class="p">;</span>
</span><span class="line"><span class="n">vector</span><span class="o">&lt;</span><span class="n">UniCharPtr</span><span class="o">&gt;</span> <span class="n">vc</span><span class="p">;</span>
</span><span class="line"><span class="n">vc</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">UniCharPtr</span><span class="p">(</span><span class="n">new</span> <span class="kt">char</span><span class="p">(</span><span class="sc">&#39;c&#39;</span><span class="p">)));</span>
</span><span class="line"><span class="n">vc</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">UniCharPtr</span><span class="p">(</span><span class="n">new</span> <span class="kt">char</span><span class="p">(</span><span class="sc">&#39;b&#39;</span><span class="p">)));</span>
</span><span class="line"><span class="n">vc</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">UniCharPtr</span><span class="p">(</span><span class="n">new</span> <span class="kt">char</span><span class="p">(</span><span class="sc">&#39;a&#39;</span><span class="p">)));</span>
</span><span class="line"><span class="n">sort</span><span class="p">(</span><span class="n">vc</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">vc</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[]</span> <span class="p">(</span><span class="k">const</span> <span class="n">UniCharPtr</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">UniCharPtr</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">bool</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="o">*</span><span class="n">a</span> <span class="o">&lt;</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在這裡同樣用上了<a href="http://candrews.net/blog/2011/07/understanding-c-0x-lambda-functions/">lambda expression</a>，留待有空再寫。</p>

<p>有個手法稱作<a href="http://www.gotw.ca/gotw/025.htm">source and sink idiom</a>
因為有了Move Semantics更容易的實現。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">Source</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">new</span> <span class="kt">int</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="n">Sink</span><span class="p">(</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">s</span><span class="p">)</span> <span class="p">{}</span>
</span><span class="line"><span class="k">auto</span> <span class="n">source</span> <span class="o">=</span> <span class="n">Source</span><span class="p">();</span>
</span><span class="line"><span class="n">Sink</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">source</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>除此之外，還能夠自訂Destructor。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">auto</span> <span class="n">del</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Deleting x, value is : &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">	<span class="n">delete</span> <span class="n">p</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">decltype</span><span class="p">(</span><span class="n">del</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">px</span><span class="p">(</span><span class="n">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">del</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以及透過<code>partial specialization</code>來管理一個動態產生的Array。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">auto</span> <span class="n">del</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">p</span><span class="p">[])</span> <span class="p">{</span> <span class="n">delete</span> <span class="p">[]</span> <span class="n">p</span><span class="p">;</span> <span class="p">};</span>
</span><span class="line"><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span> <span class="p">[],</span> <span class="n">decltype</span><span class="p">(</span><span class="n">del</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">px</span><span class="p">(</span><span class="n">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">del</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在ubuntu中設定ssh]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/01/14/setup-ssh-server-in-ubuntu/"/>
    <updated>2013-01-14T22:08:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/01/14/setup-ssh-server-in-ubuntu</id>
    <content type="html"><![CDATA[<h2 id="openssh-server">安裝openssh-server</h2>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">apt</span>-get install openssh-server
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>現在就可以用Putty從遠端登入了，如果要有更佳的安全性，需要做進一步的設定。</p>

<h2 id="sshdconfig">修改sshd_config</h2>
<p>這個檔案位在<code>/etc/ssh/sshd_config</code>。</p>

<h3 id="rootlogin">禁止root帳號login</h3>
<p>將設定檔裡面的 PermitRootLogin <strong>yes</strong> 改成 <strong>no</strong>。</p>

<h3 id="login-port">更改login port</h3>
<p>修改Port <strong>22</strong>。</p>

<h2 id="ip">允許特定IP登入</h2>
<p>修改<code>/etc/hosts.allow</code>這個檔案</p>

<p>新增 <code>sshd: xxx.xxx.xxx.xxx allow</code>允許特定的IP放行。</p>

<h3 id="ip-1">拒絕所有IP登入，除了上面已經允許的部分</h3>
<p>修改<code>/etc/hosts.deny</code></p>

<p>新增<code>sshd: all deny</code></p>

<h2 id="section">修改設定過後，重新啟動服務</h2>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>/etc/init.d/ssh <span class="err">(</span>stop / start / restart<span class="err">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何從一個Singly linked linear list中刪除資料]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/01/14/delete-item-from-a-singly-linked-linear-list/"/>
    <updated>2013-01-14T22:08:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/01/14/delete-item-from-a-singly-linked-linear-list</id>
    <content type="html"><![CDATA[<p>要從一個<strong>singly lisked linerar list</strong>中刪除文件，最簡單的方式莫過於用一個指標指向前一個node，如果現在的item需要刪除，將前面一項item指向後面的item即可。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">node</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">node</span> <span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span> <span class="n">node</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">node</span> <span class="o">*</span><span class="nf">remove_if</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span> <span class="n">head</span><span class="p">,</span> <span class="n">remove_fn</span> <span class="n">rm</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">curr</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span> <span class="n">curr</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">            <span class="n">node</span> <span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">rm</span><span class="p">(</span><span class="n">curr</span><span class="p">))</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                    <span class="k">if</span> <span class="p">(</span><span class="n">prev</span><span class="p">)</span>
</span><span class="line">                            <span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">                    <span class="k">else</span>
</span><span class="line">                            <span class="n">head</span> <span class="o">=</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">                    <span class="n">free</span><span class="p">(</span><span class="n">curr</span><span class="p">);</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="k">else</span>
</span><span class="line">                    <span class="n">prev</span> <span class="o">=</span> <span class="n">curr</span><span class="p">;</span>
</span><span class="line">            <span class="n">curr</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有人提出了更精巧的方法，利用<strong>two star pointer</strong>來達成，也就是指標的指標。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">remove_if</span><span class="p">(</span><span class="n">node</span> <span class="o">**</span><span class="n">head</span><span class="p">,</span> <span class="n">remove_fn</span> <span class="n">rm</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="n">node</span><span class="o">**</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span> <span class="o">*</span><span class="n">curr</span><span class="p">;</span> <span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">            <span class="n">node</span> <span class="o">*</span> <span class="n">entry</span> <span class="o">=</span> <span class="o">*</span><span class="n">curr</span><span class="p">;</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">rm</span><span class="p">(</span><span class="n">entry</span><span class="p">))</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                    <span class="o">*</span><span class="n">curr</span> <span class="o">=</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">                    <span class="n">free</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="k">else</span>
</span><span class="line">                    <span class="n">curr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">entry</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在C++11的年代，增加了<code>forward_list</code>，省得自己造輪子的麻煩。
以下是forward_list的介紹。</p>
<blockquote><p>std::forward_list is a container that supports fast insertion and removal of elements from anywhere in the container. Fast random access is not supported. It is implemented as singly-linked list and essentially does not have any overhead compared to its implementation in C. Compared to std::list this container provides more space efficient storage when bidirectional iteration is not needed.</p></blockquote>

<p>以下是一個示範程式，裡面同時使用了<a href="http://candrews.net/blog/2011/07/understanding-c-0x-lambda-functions/">lambda expression</a>跟<a href="http://oopscenities.net/2011/06/09/c0x-range-based-for-loop/">Range-based for loop</a>，日後有時間在寫。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;forward_list&gt;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">forward_list</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">};</span>
</span><span class="line">    <span class="n">list</span><span class="p">.</span><span class="n">remove_if</span><span class="p">([](</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span> <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">:</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39; &#39;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ar, ranlib, ld issue]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/01/10/ar-ranlib-ld-issue/"/>
    <updated>2013-01-10T19:22:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/01/10/ar-ranlib-ld-issue</id>
    <content type="html"><![CDATA[<p>在網路上找了一下ranlib的用法，發現這算是歷史共業之一。
一開始的ar只是像tar一樣，負責打包所有的object file。而不用來處理linking時所需要的Archive index，這個部分交由ranlib來負責。
後來發現這兩個部份可以合而為一，再加入或更新object file的時候，一同更新所需要的Archive Index。ranlib的功用就如同<code>ar -s</code>，為了維持相容性而留下來。</p>

<p>以下是一個需要使用ranlib的例子，為了示範，使用特殊的設定，一般不會遇到這種問題。假設我們現在有個foo.o了，接著建立一個archive file。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">ar</span> rcS libTest.a foo.o
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意這邊的<strong>S</strong>選項，我們強迫不讓他產生Symbol table，現今的環境就算不加<strong>s</strong>也會產生Symbol tabl。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> main.c libTest.a -o main
</span><span class="line">libTest.a: could not read symbols: Archive has no index; run ranlib to add one
</span><span class="line">collect2: ld returned 1 exit status
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用nm看一下libTest.a</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">nm</span> -s libTest.a
</span><span class="line">
</span><span class="line">foo.o:
</span><span class="line">0000000000000000 T foo
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>nm對<code>-s</code>的說明如下 </p>
<blockquote><p>When listing symbols from archive members, include the index: a mapping (stored in the archive by ar or ranlib) of which modulescontain definitions for which names.</p></blockquote>
<p>以上的結果表示我們在archive file裡面沒有archive index的存在，這時候就該<code>ranlib</code>登場了</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">ranlib</span> libTest.a
</span><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> test.c libTest.a -o test
</span><span class="line"><span class="nv">$ </span>./test
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再度用nm來看結果</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">nm</span> -s libTest.a
</span><span class="line">Archive index:
</span><span class="line">foo in foo.o
</span><span class="line">
</span><span class="line">foo.o:
</span><span class="line">0000000000000000 T foo
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>現在看到Archive index被成功建立了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add resource files to executable/library for gcc]]></title>
    <link href="http://HungMingWu.github.com/blog/2013/01/10/Add-resource-files-to-executablelibrary-for-gcc/"/>
    <updated>2013-01-10T19:22:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2013/01/10/Add-resource-files-to-executablelibrary-for-gcc</id>
    <content type="html"><![CDATA[<p>在Stackoverflow看到<a href="http://stackoverflow.com/questions/4864866/c-c-with-gcc-statically-add-resource-files-to-executable-library">類似的問題</a>，紀錄一下
假設我門需要把一個resource加入執行檔或Library，可以使用以下的方法
假設我們現在有個檔案，叫做data
裡面的內容還是我們的老朋友<code>Hello world!</code>
有兩個方式可以達成</p>

<h2 id="object-file">將檔案變成 object file</h2>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">objcopy</span> -I binary -O elf64-x86-64 -B i386 data data.o
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果我們用nm來觀看其內容</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">nm</span> data.o
</span><span class="line">000000000000000d D _binary_data_end
</span><span class="line">000000000000000d A _binary_data_size
</span><span class="line">0000000000000000 D _binary_data_start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中的<strong>A</strong>代表在之後的連結過程，其數值不會再之後的動作所更改。接著我們寫另外一段程式</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">extern</span> <span class="kt">char</span> <span class="n">my_data</span><span class="p">[]</span> <span class="n">asm</span><span class="p">(</span><span class="s">&quot;_binary_data_start&quot;</span><span class="p">);</span>
</span><span class="line"><span class="k">extern</span> <span class="kt">char</span> <span class="n">my_data_size</span><span class="p">[]</span> <span class="n">asm</span><span class="p">(</span><span class="s">&quot;_binary_data_size&quot;</span><span class="p">);</span>
</span><span class="line"><span class="k">extern</span> <span class="kt">char</span> <span class="n">my_data_end</span><span class="p">[]</span> <span class="n">asm</span><span class="p">(</span><span class="s">&quot;_binary_data_end&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="kt">char</span> <span class="o">*</span><span class="n">c</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="n">c</span> <span class="o">=</span> <span class="n">my_data</span><span class="p">;</span> <span class="n">c</span> <span class="o">!=</span> <span class="n">my_data_end</span><span class="p">;</span> <span class="n">c</span><span class="o">++</span><span class="p">)</span> <span class="n">putchar</span><span class="p">(</span><span class="o">*</span><span class="n">c</span><span class="p">);</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;String length: %ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>  <span class="p">(</span><span class="kt">long</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">my_data_size</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>編譯且執行他</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> test.c data.o -o test
</span><span class="line"><span class="nv">$ </span>./test
</span><span class="line">Hello world!
</span><span class="line">String length: 13
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>從code可以看出，我們的<code>my_data</code>就是對應_binary_data_start的部分
please reference <a href="http://gcc.gnu.org/onlinedocs/gcc-4.4.0/gcc/Asm-Labels.html#Asm-Labels">Controlling Names Used in Assembler Code</a></p>

<p>重新用nm看產生的執行檔，關切我們在意的部分</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">nm</span> test
</span><span class="line">0000000000601035 D _binary_data_end
</span><span class="line">000000000000000d A _binary_data_size
</span><span class="line">0000000000601028 D _binary_data_start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>發現_binary_data_start跟_binary_data_end在連結之後，都被重定位了。而_binary_data_size的位置保持不變，因此可以做為一個sentinel使用。</p>

<h2 id="header-file-">將檔案變成單一header file (適用於各種編譯器)</h2>

<p>利用工具將Binary Data轉成Header file，這邊用linux的xxd來做示範。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">xxd</span> xxd -i data data.h
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>重寫我們的程式</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">nclude</span> <span class="o">&lt;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class="line"><span class="cp">#include &quot;data.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">data_len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">putchar</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;String length: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>  <span class="n">data_len</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>編譯且執行他</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> test.c -o test
</span><span class="line"><span class="nv">$ </span>./test
</span><span class="line">Hello world!
</span><span class="line">String length: 13
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以得到跟上面一樣的結果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCC Notes]]></title>
    <link href="http://HungMingWu.github.com/blog/2012/12/20/gcc-notes/"/>
    <updated>2012-12-20T10:59:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2012/12/20/gcc-notes</id>
    <content type="html"><![CDATA[<h3 id="gcc-">gcc 常用參數介紹</h3>

<ul>
  <li>什麼參數都不加</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> hello.c
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>直接產生a.out</p>

<ul>
  <li>無連結選項</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> hello.c -o hello
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>直接產生可執行文件hello</p>

<ul>
  <li><code>-x language</code> filename 
設定文件所使用的語言，使預設的附檔名失效，對之後的檔案也有效，除非你再次設定這個參數。可以使用的語言有C/C++等。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> -x c hello.pig
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面這個例子，就是將附檔名pig的檔案當作C語言來編譯。如果在後面加上了<code>-x none</code> filename，則會抵銷前面的作用，回復復育社規則來編譯。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> -x c hello.pig -x none hello2.c
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p><code>-c</code>
將程式碼生成至obj file後停止，預設附檔名是.o。</p>
  </li>
  <li>
    <p><code>-S</code>
將程式生成至Assembler Code後停止，預設附檔名是.s。</p>
  </li>
  <li>
    <p><code>-E</code>
只處理Preprocess的部份，跟上面兩者不同，不會產生檔案，需要用Redirect的方式產生文件。</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> -E hello.c &gt; hello.i
</span><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> -E hello.c | less
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>-o</code> 
指定輸出檔案名稱，可以跟上面參數合併使用。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> -S hello.c -o hello.asm
</span><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> -c hello.c  -o hello.obj
</span><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> hello.c -o hello.exe
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>-ansi</code>
關閉GNU C和ANSI C不相容的部分，在C模式相當於c90，在C++模式相當於C++98。如<code>asm</code>、&#8220;inline<code>、</code>typeof<code>等。如果你不考慮寫個標準的ISO C語言的話，在</code>-ansi<code>參數下還是能夠用</code><strong>asm</strong><code>、</code><strong>inline</strong><code>、</code><strong>typeof</strong>`等GCC拓展語法繼續工作。如果要避免這種情況，可以配合底下這個參數。</li>
  <li><code>-pedandic</code>
對所有不合乎C/C++ Standard的與法發出嚴重警告，</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Export WinMain from DLL]]></title>
    <link href="http://HungMingWu.github.com/blog/2012/12/19/export-winmain-from-dll/"/>
    <updated>2012-12-19T21:55:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2012/12/19/export-winmain-from-dll</id>
    <content type="html"><![CDATA[<p>一直到今天才成功實驗出如何把WinMain放在DLL裡面，紀念一下。</p>

<p>首先，把WinMain放在DLL裡面。注意是WinMain而不是wWinMain，這邊也只有WinMain可以正常運作。</p>

<p>第二步，新增一個def檔，裡面加入</p>

<blockquote><p>EXPORTS<br />WinMain</p></blockquote>
<p>將WinMain輸出到Export Table，只有WinMain需要這樣做，用<strong>__declspec(dllexport)</strong>輸出的函數跟類別不受影響，且WinMain不能這方式輸出。視為特例。</p>

<p>第三步，直接讓Application連結DLL產生的Library即可。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile Linux Kernel]]></title>
    <link href="http://HungMingWu.github.com/blog/2012/12/18/compile-linux-kernel/"/>
    <updated>2012-12-18T17:20:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2012/12/18/compile-linux-kernel</id>
    <content type="html"><![CDATA[<p>Linux 3.7 kernel出了，順便記憶編譯核心過程</p>

<p>到  <a href="http://www.kernel.org/">The Linux Kernel Archives</a> 抓取想要的核心版本，這裡我們拿3.7當範例，下載完並解開。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">tar</span> xjf linux-3.7.tar.bz2
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> linux-3.7
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>拿之前已經設定過的.config為基礎繼續修改</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">cp</span> /boot/config-x.x.x .config
</span><span class="line"><span class="nv">$ </span><span class="nb">make</span> menuconfig
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改完之後就可以下 <strong>make</strong> 開始編譯</p>

<p>等到結束之後，就能下</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">make</span> install
</span><span class="line"><span class="nv">$ </span><span class="nb">make</span> modules_install
</span><span class="line"><span class="nv">$ </span><span class="nb">make</span> headers_install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>來安裝核心，模組，和對應的header files。</p>

<p>更新 System.map</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">depmod</span> -eF -m  /boot/System.map-3.7.0 3.7.0
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to LLVM]]></title>
    <link href="http://HungMingWu.github.com/blog/2012/12/18/introduction-to-llvm/"/>
    <updated>2012-12-18T10:18:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2012/12/18/introduction-to-llvm</id>
    <content type="html"><![CDATA[<h2 id="what-is-llvm">What is LLVM?</h2>
<p>LLVM的全名是<strong>Low Level Virtual Machine</strong>，和一般所知的Virtual Machine(VMWare, VirtualBox等)不同，他是一種編譯器架構。主要分成</p>

<ul>
  <li>前端： Source Code -&gt; BitCode</li>
  <li>後端： BitCode -&gt; Native Code</li>
</ul>

<p>由於BitCode的獨立性，可以很容易的跨平台。</p>

<p>而LLVM主要有以下幾個特性：</p>

<ol>
  <li>RISC Like的指令集</li>
  <li>以SSA(Static Single-Assignment) 形式提供數目不設限的虛擬暫存器</li>
  <li>以Load/store 指令存取型態定義的指標(Typed-Pointer)</li>
  <li>基於SSA可明確資料在運作過程中的傳遞流程</li>
  <li>提供跟語言無關的形態資訊</li>
  <li>在exception的支援上提供 setjmp/longjmp實作的Exception機制,並提供 invoke指令可呼叫一個需要帶有Exception Handler的函式,與提供Unwind指令,能透過Stack Frame回推到上一個invoke指令位置.</li>
</ol>

<h2 id="llvm">如何使用LLVM</h2>
<p>在這裡我們使用<code>Clang</code>來當FrontEnd，將C語言轉換成BitCode。</p>

<p>依舊從Hello World開始</p>

<div><script src="https://gist.github.com/4324690.js?file=hello.c"></script>
<noscript><pre><code>#include &lt;stdio.h&gt;
int main()
{
        printf(&quot;Hello World!\n&quot;);
        return 0;
}</code></pre></noscript></div>

<p>接著我們編譯此檔案</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">clang</span> -S -emit-llvm hello.c
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此時目錄下生成了hello.s，觀看其內容</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">; ModuleID = 'hello.c'
</span><span class="line">target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
</span><span class="line">target triple = "x86_64-unknown-freebsd9.0"
</span><span class="line">
</span><span class="line">@.str = private unnamed_addr constant [14 x i8] c"Hello World!\0A\00", align 1
</span><span class="line">
</span><span class="line">define i32 @main() nounwind uwtable {
</span><span class="line">entry:
</span><span class="line">  %retval = alloca i32, align 4
</span><span class="line">  store i32 0, i32* %retval
</span><span class="line">  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0))
</span><span class="line">  ret i32 0
</span><span class="line">}
</span><span class="line">
</span><span class="line">declare i32 @printf(i8*, ...)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意，在這邊我們有加上 <code>-emit-llvm</code>的選項，表示我們要使用LLVM的對應組件，如果沒加這命令的話，其作用跟一般的Native Complier相同，如下。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">clang</span> -S hello.c
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一樣產生hello.s，但是內容完全不同</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class=""><span class="line">.file   "hello.c"
</span><span class="line">        .text
</span><span class="line">        .globl  main
</span><span class="line">        .align  16, 0x90
</span><span class="line">        .type   main,@function
</span><span class="line">main:                                   # @main
</span><span class="line">.Ltmp2:
</span><span class="line">        .cfi_startproc
</span><span class="line"># BB#0:                                 # %entry
</span><span class="line">        pushq   %rbp
</span><span class="line">.Ltmp3:
</span><span class="line">        .cfi_def_cfa_offset 16
</span><span class="line">.Ltmp4:
</span><span class="line">        .cfi_offset %rbp, -16
</span><span class="line">        movq    %rsp, %rbp
</span><span class="line">.Ltmp5:
</span><span class="line">        .cfi_def_cfa_register %rbp
</span><span class="line">        subq    $16, %rsp
</span><span class="line">        leaq    .L.str, %rdi
</span><span class="line">        movl    $0, -4(%rbp)
</span><span class="line">        movb    $0, %al
</span><span class="line">        callq   printf
</span><span class="line">        movl    $0, %ecx
</span><span class="line">        movl    %eax, -8(%rbp)          # 4-byte Spill
</span><span class="line">        movl    %ecx, %eax
</span><span class="line">        addq    $16, %rsp
</span><span class="line">        popq    %rbp
</span><span class="line">        ret
</span><span class="line">.Ltmp6:
</span><span class="line">        .size   main, .Ltmp6-main
</span><span class="line">.Ltmp7:
</span><span class="line">        .cfi_endproc
</span><span class="line">.Leh_func_end0:
</span><span class="line">
</span><span class="line">        .type   .L.str,@object          # @.str
</span><span class="line">        .section        .rodata.str1.1,"aMS",@progbits,1
</span><span class="line">.L.str:
</span><span class="line">        .asciz   "Hello World!\n"
</span><span class="line">        .size   .L.str, 14
</span><span class="line">
</span><span class="line">
</span><span class="line">        .section        ".note.GNU-stack","",@progbits</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="bitcode">如何產生 BitCode</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">clang</span> -emit-llvm hello.c -c -o hello.bc
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="llvmjitbitcode">如何用 LLVM的JIT執行BitCode</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">lli</span> hello.bc
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="bitcodeassembly-code">如何看BitCode的Assembly Code</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">llvm</span>-dis &lt; hello.bc | less
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="bitcode-native-assembly-code">如何用BitCode產生 Native Assembly Code</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">llc</span> hello.bc -o hello.s
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="bitcodenative-machine-code">如何用BitCode產生Native Machine Code</h3>
<p>可以直接從BitCode下手，或是從上一步驟產生出來的Assembly Code下手</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">clang</span> hello.bc -o hello_native
</span><span class="line"><span class="nv">$ </span><span class="nb">clang</span> hello.s -o hello_native
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Octopress中使用Latex]]></title>
    <link href="http://HungMingWu.github.com/blog/2012/12/07/latex-on-octopress/"/>
    <updated>2012-12-07T15:18:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2012/12/07/latex-on-octopress</id>
    <content type="html"><![CDATA[<p>如果要在Octopress使用數學符號，首先先安裝 kramdown</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem install kramdown</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接著修改_config.yml</p>

<div><script src="https://gist.github.com/4231812.js?file=_config.yaml.diff"></script>
<noscript><pre><code>index 1a06ae2..ef440ea 100644
--- a/_config.yml
+++ b/_config.yml
@@ -33,7 +33,7 @@ destination: public
 plugins: plugins
 code_dir: downloads/code
 category_dir: blog/categories
-markdown: rdiscount
+markdown: kramdown
 pygments: false # default python pygments have been replaced by pygments.rb

 paginate: 10          # Posts per page on the blog index</code></pre></noscript></div>

<p>將rdiscount改成kramdown</p>

<p>將以下這段代碼塞入 /source/_includes/custom/head.html</p>
<div><script src="https://gist.github.com/4231812.js?file=head.html"></script>
<noscript><pre><code>&lt;!-- mathjax config similar to math.stackexchange --&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [ ['$','$'], [&quot;\\(&quot;,&quot;\\)&quot;] ],
      processEscapes: true
    }
  });
&lt;/script&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
    MathJax.Hub.Config({
      tex2jax: {
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
      }
    });
&lt;/script&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
    MathJax.Hub.Queue(function() {
        var all = MathJax.Hub.getAllJax(), i;
        for(i=0; i &lt; all.length; i += 1) {
            all[i].SourceElement().parentNode.className += ' has-jax';
        }
    });
&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;
   src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;
&lt;/script&gt;
</code></pre></noscript></div>

<p>解決滑鼠右鍵按下會一片空白的問題</p>
<div><script src="https://gist.github.com/4231812.js?file=_theme.scss.diff"></script>
<noscript><pre><code>--- a/sass/base/_theme.scss
+++ b/sass/base/_theme.scss
@@ -75,7 +75,7 @@ html {
   background: $page-bg image-url('line-tile.png') top left;
 }
 body {
-  &gt; div {
+  &gt; div#main {
     background: $sidebar-bg $noise-bg;
     border-bottom: 1px solid $page-border-bottom;
     &gt; div {
</code></pre></noscript></div>

<!-- more -->
<p>以下是範例：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<p>試試看插入LaTeX數學式：$\exp(-\frac{x^2}{2})$</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use ports on FreeBSD]]></title>
    <link href="http://HungMingWu.github.com/blog/2012/12/07/how-to-use-ports-on-freebsd/"/>
    <updated>2012-12-07T08:57:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2012/12/07/how-to-use-ports-on-freebsd</id>
    <content type="html"><![CDATA[<p>ports是FreeBSD安裝軟體的主要途徑，在安裝FreeBSD的時候記得選取<strong>Port Collection</strong>。</p>

<p>Portsnap 是 FreeBSD 6.0之後所採用的更新Ports方案，以下是簡單介紹。</p>

<h3 id="portsnap">首次使用 Portsnap</h3>
<p>首先使用 <strong>portsnap fetch</strong> 抓取Server中的Snapshot，接著使用 <strong>portsnap extract</strong>解開存入/usr/ports中。 兩個指令也可以合併一起使用 <strong>portsnap fetch extract</strong>。</p>

<h3 id="portsnap-1">更新 Portsnap</h3>
<p>跟上面一樣的方法，先 <strong>portsnap fetch</strong>抓取Snapshot，接著<strong>portsnap update</strong>更新ports資料：也可以<strong>portsnap fetch update</strong>一起使用。</p>

<h3 id="ports-">如何在 ports 裡面找尋軟體</h3>
<p>在 /usr/ports下，打上 <strong>make search name=”xxx”</strong>*，就可以找到xxx有關的ports。</p>

<h3 id="section">如何安裝軟體</h3>
<p>在對應的 ports中，打上 <strong>make install</strong> 即可安裝，<strong>make clean</strong> 會將中間產物清除，同樣的可以使用 <strong>make install clean</strong>來完成上面兩件事。</p>

<h3 id="section-1">如何移除已安裝的軟體</h3>
<p>同樣進入對應的ports，打上 <strong>make deinstall</strong></p>

<h3 id="section-2">如何一次更新所有安裝過的軟體</h3>
<p>先從ports當中安裝portmaster。更新port colecction，接著打<strong>portmaster -ayD</strong>全部更新，要對portmaster有更進一步了解，請參考底下網頁。</p>

<h3 id="section-3">參考資料</h3>
<p><a href="http://www.freebsd.org/zh/FAQ/ports.html">1. Ports and Packages 常見問題</a></p>

<p><a href="http://pgx.servu.tw/2012/08/01/portmaster/">2. 系統 Ports 軟體升級工具： portmaster</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incomplete class types for C++]]></title>
    <link href="http://HungMingWu.github.com/blog/2012/12/05/incomplete-class-types-for-c-plus-plus/"/>
    <updated>2012-12-05T15:32:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2012/12/05/incomplete-class-types-for-c-plus-plus</id>
    <content type="html"><![CDATA[<p>先從 C++ Standard看起</p>

<blockquote><p>The C++ Standard allows, in 5.3.5/5, pointers to incomplete class types to be deleted with a delete-expression. When the class has a non-trivial destructor, or a class-specific operator delete, the behavior is undefined. Some compilers issue a warning when an incomplete type is deleted, but unfortunately, not all do, and programmers sometimes ignore or disable warnings.</p></blockquote>

<p>當呼叫deleter時，僅會釋放pointer所佔據的空間，由於不知道他的Destructor有沒有其他的行為，因此不會呼叫其Destructor。</p>

<p>以下是一個範例</p>

<div><script src="https://gist.github.com/4213523.js"></script>
<noscript><pre><code>#include &quot;deleter.h&quot;
void delete_object(Object* p) 
{ 
	delete p; 
}</code></pre></noscript></div>

<p>在各大編譯器下給出的錯誤訊息
#### Visual Studio ####</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">warning C4150: deletion of pointer to incomplete type 'Object'; no destructor called</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="gcc">GCC</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">deleter.cpp: In function 'void delete_object(Object*)':
</span><span class="line">deleter.cpp:4: warning: possible problem detected in invocation of delete operator:
</span><span class="line">deleter.cpp:2: warning: 'p' has incomplete type
</span><span class="line">deleter.h:1: warning: forward declaration of 'struct Object'
</span><span class="line">deleter.cpp:4: note: neither the destructor nor the class-specific operator delete will be called, even if they are declared when the class is defined.</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="clang">clang</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">deleter.cpp:4:2: warning: deleting pointer to incomplete type 'Object' may cause
</span><span class="line">      undefined behaviour
</span><span class="line">        delete p; 
</span><span class="line">        ^      ~
</span><span class="line">./deleter.h:1:7: note: forward declaration of 'Object'
</span><span class="line">class Object;
</span><span class="line">      ^
</span><span class="line">1 warning generated.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>解決方式也很簡單，在deleter.cpp中加入 <strong>#include “object.h”</strong> 即可。</p>

<p>或是參考 <a href="http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Checked_delete">Check Delete Item</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction Valgrind]]></title>
    <link href="http://HungMingWu.github.com/blog/2012/12/05/introduction-valgrind/"/>
    <updated>2012-12-05T10:35:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2012/12/05/introduction-valgrind</id>
    <content type="html"><![CDATA[<p>Valgrind是一套用來動態分析程式的框架，他提供一組程式，用來測試，最佳化，及幫助改善程式的方案，你也可以自行開發工具加入Valgrind框架裡面，幫助測試你的程式。</p>

<p>目前的Valgrind套件主要包含了</p>

<ul>
  <li>memcheck</li>
  <li>Cachegrind </li>
  <li>Callgrind</li>
  <li>Helgrind</li>
  <li>DRD</li>
  <li>Massif</li>
  <li>DHAT</li>
  <li>SGcheck</li>
  <li>BBV</li>
</ul>

<p>我們以最常遇到的Memory Leak來介紹， 編譯的時候記得加<strong>-g</strong>帶除錯參數</p>

<div><script src="https://gist.github.com/4211689.js?file=main.cpp"></script>
<noscript><pre><code>#include &lt;stdlib.h&gt;
int main() 
{
	void *p = malloc(10);  
       	return 0;
}</code></pre></noscript></div>

<p>以下是Valgrind分析的結果</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$:~/test$ valgrind --tool=memcheck  --leak-check=full ./main
</span><span class="line">==4886== Memcheck, a memory error detector
</span><span class="line">==4886== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
</span><span class="line">==4886== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
</span><span class="line">==4886== Command: ./main
</span><span class="line">==4886== 
</span><span class="line">==4886== 
</span><span class="line">==4886== HEAP SUMMARY:
</span><span class="line">==4886==     in use at exit: 10 bytes in 1 blocks
</span><span class="line">==4886==   total heap usage: 1 allocs, 0 frees, 10 bytes allocated
</span><span class="line">==4886== 
</span><span class="line">==4886== 10 bytes in 1 blocks are definitely lost in loss record 1 of 1
</span><span class="line">==4886==    at 0x4C2B6CD: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
</span><span class="line">==4886==    by 0x400505: main (main.cpp:3)
</span><span class="line">==4886== 
</span><span class="line">==4886== LEAK SUMMARY:
</span><span class="line">==4886==    definitely lost: 10 bytes in 1 blocks
</span><span class="line">==4886==    indirectly lost: 0 bytes in 0 blocks
</span><span class="line">==4886==      possibly lost: 0 bytes in 0 blocks
</span><span class="line">==4886==    still reachable: 0 bytes in 0 blocks
</span><span class="line">==4886==         suppressed: 0 bytes in 0 blocks
</span><span class="line">==4886== 
</span><span class="line">==4886== For counts of detected and suppressed errors, rerun with: -v
</span><span class="line">==4886== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 2 from 2)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>由於我們有待除錯參數，所以我們可以發現Memory Leak發生在main.cpp的第三行。</p>

<p>Valgrind不只可以偵測一般的執行檔，連Static Library跟SharedObject都可以偵測，只要記得編譯時帶除錯參數。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ return secret]]></title>
    <link href="http://HungMingWu.github.com/blog/2012/12/04/c-plus-plus-return-secret/"/>
    <updated>2012-12-04T10:34:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2012/12/04/c-plus-plus-return-secret</id>
    <content type="html"><![CDATA[<p>之前實驗出來的結果，做個筆記，以免日後忘記。</p>

<p>由於現在的C++編譯器都會做某種程度的最佳化，以GCC來當範本，加上<strong>-fno-elide-constructors</strong> 參數避免<a href="http://en.wikipedia.org/wiki/Copy_elision">Copy elision</a>。</p>

<p>以下是我們的程式碼。</p>

<div><script src="https://gist.github.com/4200056.js?file=Demo1.cpp"></script>
<noscript><pre><code>#include &lt;iostream&gt;
struct foo
{
        static int count;
        int id;
        foo() : id(++count)
        {
                std::cout &lt;&lt; &quot;Constructing! &quot; &lt;&lt; id &lt;&lt; std::endl;
        }

        foo(const foo&amp; f) :id(++count)
        {
                std::cout &lt;&lt; &quot;Copy constructing! &quot; &lt;&lt; id &lt;&lt; std::endl;
        }

        ~foo()
        {
                std::cout &lt;&lt; &quot;Destructing.. &quot; &lt;&lt; id &lt;&lt; std::endl;
        }
};
int foo::count = 0;
foo get()
{
        foo f;
        return f;
}
int main()
{
        foo f = get();
        std::cout &lt;&lt; &quot;before return&quot; &lt;&lt; std::endl;
        return 0;
}</code></pre></noscript></div>

<p>而第一版的執行結果如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Constructing! 1
</span><span class="line">Copy constructing! 2
</span><span class="line">Destructing.. 1
</span><span class="line">Copy constructing! 3
</span><span class="line">Destructing.. 2
</span><span class="line">before return
</span><span class="line">Destructing.. 3</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>從結果我們可以發現，get函數裡面的f，就是id為1的物件，而這個物件在函數結束之後就結束生命週期。而id為2的物件就是get回傳的暫時物件。當回傳時會複製f的內容，而生命週期在main中的<strong>foo f = get();</strong>之後也跟著消失，從這邊可以看到，我們<strong>產生了一個物件，複製了兩份物件</strong>，如果當物件體積大的時候，大量的複製/銷燬這種損失是巨大的。</p>

<p>接著介紹
<a href="http://herbsutter.com/2008/01/01/gotw-88-a-candidate-for-the-most-important-const/">Returning temporary object and binding to const reference</a>
第二版的程式碼</p>

<div><script src="https://gist.github.com/4200056.js?file=Demo2.cpp"></script>
<noscript><pre><code>#include &lt;iostream&gt;
struct foo
{
        static int count;
        int id;
        foo() : id(++count)
        {
                std::cout &lt;&lt; &quot;Constructing! &quot; &lt;&lt; id &lt;&lt; std::endl;
        }

        foo(const foo&amp; f) :id(++count)
        {
                std::cout &lt;&lt; &quot;Copy constructing! &quot; &lt;&lt; id &lt;&lt; std::endl;
        }

        ~foo()
        {
                std::cout &lt;&lt; &quot;Destructing.. &quot; &lt;&lt; id &lt;&lt; std::endl;
        }
};
int foo::count = 0;
foo get()
{
        foo f;
        return f;
}
int main()
{
        const foo&amp; f = get();
        std::cout &lt;&lt; &quot;before return&quot; &lt;&lt; std::endl;
        return 0;
}</code></pre></noscript></div>

<p>來看執行結果</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Constructing! 1
</span><span class="line">Copy constructing! 2
</span><span class="line">Destructing.. 1
</span><span class="line">before return
</span><span class="line">Destructing.. 2</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看到少了一個Object生成，這是由於<a href="http://cpp0x.centaur.ath.cx/class.temporary.html">C++  Standards Temporary objects </a>中有這麼一段話。</p>

<blockquote><p>A temporary bound to a reference member in a constructor’s ctor-initializer (12.6.2) persists until the constructor exits.</p></blockquote>
<p>所以這個暫時物件的生命週期就跟main的生命週期一樣長，無需再複製一份。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find text pattern in files on Linux]]></title>
    <link href="http://HungMingWu.github.com/blog/2012/11/09/find-text-pattern-in-files-on-linux/"/>
    <updated>2012-11-09T09:40:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2012/11/09/find-text-pattern-in-files-on-linux</id>
    <content type="html"><![CDATA[<p>在Linux下尋找text pattern的方法。
方法一：使用 find 跟 xargs 共同使用
&gt; find dir/ | xargs grep str</p>

<p>這方法會搜尋底下的子目錄
&gt; find file | xargs grep str</p>

<p>搜尋檔案裡面是否出現text pattern</p>

<p>方法二： 直接使用grep
&gt; grep [-r] str dir/* </p>

<p>搜尋目錄下的所有檔案，-r表示是否蓮子目錄一起搜尋
&gt; grep str file</p>

<p>搜尋檔案裡面是否出現text pattern</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JNI Tutorial]]></title>
    <link href="http://HungMingWu.github.com/blog/2012/11/08/jni-tutorial/"/>
    <updated>2012-11-08T11:49:00+08:00</updated>
    <id>http://HungMingWu.github.com/blog/2012/11/08/jni-tutorial</id>
    <content type="html"><![CDATA[<p>記錄一下JNI的建立跟使用方法，在Linux底下驗證成功。
以下是一個簡單的範例</p>

<div><script src="https://gist.github.com/4036678.js?file=HelloWorld.java"></script>
<noscript><pre><code>class HelloWorld {
    public native void sayHello();
    static {
        System.loadLibrary(&quot;HelloWorld&quot;);
    }
    public static void main(String[] args) {
        (new HelloWorld()).sayHello();
    }
}
</code></pre></noscript></div>

<p>裡面做的事情很簡單，載入Shared Object，呼叫 Native Code。</p>

<p>第一步： 接著編譯 Java Code 產生 class 檔</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">javac</span> HelloWorld.java
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第二步： 產生 HelloWorld.h Header File</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">javah</span> -jni HelloWorld.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>產生出來的 Header File長這個樣子</p>
<div><script src="https://gist.github.com/4036678.js?file=HelloWorld.h"></script>
<noscript><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */
#include &lt;jni.h&gt;
/* Header for class HelloWorld */

#ifndef _Included_HelloWorld
#define _Included_HelloWorld
#ifdef __cplusplus
extern &quot;C&quot; {
#endif
/*
 * Class:     HelloWorld
 * Method:    sayHello
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_HelloWorld_sayHello
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
</code></pre></noscript></div>

<p>第三步： 撰寫對應的Native Code
做的事情也很簡單，就是印出Hello World而已</p>
<div><script src="https://gist.github.com/4036678.js?file=HelloWorld.c"></script>
<noscript><pre><code>#include &lt;jni.h&gt;
#include &quot;HelloWorld.h&quot;
#include &lt;stdio.h&gt;

JNIEXPORT void JNICALL Java_HelloWorld_sayHello (JNIEnv *env, jobject obj) {
    printf(&quot;Hello,the World!!!\n&quot;);
}
</code></pre></noscript></div>

<p>第四步： 產生 Shared Object</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">gcc</span> -I<span class="s2">&quot;/usr/lib/jvm/java-7-openjdk-amd64/include&quot;</span> -fPIC -shared -o libHelloWorld.so HelloWorld.c
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此時libHelloWorld.so會跟HelloWorld.class在同一個目錄中
第五步：  執行，將LibraryPath指向當前目錄
&gt; java -Djava.library.path=<code>pwd</code> HelloWorld</p>

<p>可以看到正確的結果。</p>

<p>之前是介紹如何從 Java 呼叫 C++ 的 Native Code，現在要說的是如何從C++建立 Java Virtual Machine，進而執行 Java Code。</p>

<p>第一步: 寫好Java Code且編譯
這裡準備的 Java Code</p>
<div><script src="https://gist.github.com/4037503.js?file=HelloWorld.java"></script>
<noscript><pre><code>public class HelloWorld {
        public static void main(String[] args) {
                System.out.println(&quot;Hello, World in Java&quot;);
        }
}</code></pre></noscript></div>

<p>編譯它</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">javac</span> HelloWorld.java
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第二步：撰寫C++的程式碼且編譯</p>
<div><script src="https://gist.github.com/4037503.js?file=Hello.cpp"></script>
<noscript><pre><code>#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &lt;jni.h&gt;

int main (int argc, char *argv[])
{
        JavaVM *jvm;                    /* 宣告一個java machine */
        JNIEnv *env;                    /* JNI的環境 */
        JavaVMInitArgs vm_args;

        /*自定義JRE所要的參數，就是java -... -... xxx.java將-...字串加入options中 用*/
        JavaVMOption options[1];

        jint res;
        jclass cls;
        jmethodID mid;


        vm_args.version = JNI_VERSION_1_6;  /*使用的版本*/
        options[0].optionString = &quot;-Djava.class.path=./&quot;;
        vm_args.nOptions = 1;
        vm_args.options = options;
        vm_args.ignoreUnrecognized = JNI_FALSE;

        /*產生一個java machine*/
        res = JNI_CreateJavaVM(&amp;jvm,(void**)&amp;env,&amp;vm_args);

        jclass ver;
        jmethodID print;

        /*找Helloworld Class*/
        cls = env-&gt;FindClass(&quot;HelloWorld&quot;);  

        if (cls == 0) printf(&quot;cls error \n&quot;);

        /*&gt;確定要執行的 function是甚麼 
           在這裡指的是HelloWorld裡的main 
           後面是main要傳的參數*/
        mid = env-&gt;GetStaticMethodID(cls, &quot;main&quot;, &quot;([Ljava/lang/String;)V&quot;); 

        if (mid == 0) printf(&quot;mid error \n&quot;);

        env-&gt;CallStaticVoidMethod(cls, mid); /*執行此class*/

        printf(&quot;Hello in c\n&quot;);
        return 0;
}</code></pre></noscript></div>

<p>編譯它</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">g</span>++ -I<span class="s2">&quot;/usr/lib/jvm/java-7-openjdk-amd64/include&quot;</span>  -L<span class="s2">&quot;/usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/server&quot;</span> Hello.cpp -ljvm -o Hello
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第三歩: 設定 LD_LIBRARY_PATH</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">export</span> LD_LIBRARY_PATH<span class="err">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/server
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第四歩： 執行程式</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>./Hello
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
